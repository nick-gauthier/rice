---
title: "Input data preparation"
format: html
editor: visual
---

```{r setup, message = TRUE, warning = TRUE}
# analysis packages
library(stars) # spatio-temporal raster processing
library(sf)
library(tidyverse)
library(terra)
# library(geodata) # geographic data
library(here) # cross-platform directory structures
library(readxl) # read excel spreadsheets
# library(dismo) # generating background points for niche model, not loaded but should be installed

# parallel processing
available_cores <- parallel::detectCores(logical = TRUE)

# visualization packages
library(rnaturalearth) # country boundaries

# define the study area
asia_bbox_sf <- st_bbox(c(xmin = 60, xmax = 150, ymin = -20, ymax = 50), crs = 4326)
world_bbox_sf <- st_bbox(c(xmin = -130, xmax = 155, ymin = -40, ymax = 60), crs = 4326)

bbox <- terra::ext(60, 150, -20, 50)
bbox_world <- raster::extent(-130, 155, -40, 60)  # global

# get country boundaries shapefile for plotting
sf_use_s2(FALSE)
countries <- ne_countries(returnclass = "sf", scale = 'large') %>% 
  st_crop(asia_bbox_sf)
coasts <- ne_coastline(returnclass = 'sf') %>%
  st_crop(asia_bbox_sf)
coasts_world <- ne_coastline(returnclass = 'sf') %>% 
  st_crop(world_bbox_sf)
countries_world <- ne_countries(returnclass = "sf", scale = 'large') %>% 
  st_crop(world_bbox_sf)
sf_use_s2(TRUE)


chelsa_mask <- terra::rast('../../CHELSA_V2_bio_clim/CHELSA_pet_penman_mean_1981-2010_V.2.1.tif') %>%
      terra::crop(bbox_world)

theme_set(theme_bw())
```

# Rice occurrence data

Big picture -- CVA best smallest extent, IRRI better but still small, Monfreda/ray global but not as reliable. I guess the best bet is to use monfreda/ray and irri/CVA as validation?

presence threshold for satellite imagery of 0.5

## Point occurrences

### GBIF occurrences

We used geolocated occurrence records for rice's wild progenitor (Oryza rufipogon G.) from GBIF/CHV via [here](https://www.sciencedirect.com/science/article/pii/S1574954122002631) . Also load occurrence records of domestic rice from the same source.

```{r warning = FALSE}
occ <- here('data/data-raw/Datasets of occurrence records of rice and its wild progenitor.xlsx')

rufipogon <- read_excel(occ, skip = 6715) %>%
  select(-x, -`the wild progenitor`) %>%
  st_as_sf(coords = 2:1, crs = 4326) %>%
  st_crop(asia_bbox_sf) %>% # remove south american observations, likely different species
  mutate(rice = 'present')

sativa <- read_excel(occ, n_max = 6714) %>%
  remove_missing() %>%
  select(-x, -Rice) %>%
  st_as_sf(coords = 2:1, crs = 4326) %>%
 # st_crop(asia_bbox) %>%
  mutate(rice = 'present') %>%
  select(-continent)

ggplot() +
  geom_sf(data = countries_world, color = 'white') +
  geom_sf(data = sativa, size = 0.1, color = 'black') +
  geom_sf(data = rufipogon, color = 'green', size = 0.1) +
  labs(title = "Rice occurence data", subtitle = "O. sativa (black), O. rufipogon (green)", caption = 'source: GBIF, CHV') +
  #geom_sf(data = arch, color = 'red', size = 0.11) +
  theme_minimal()
```

```{r}
ggsave('rice_occurences.png', width = 6, height = 3, bg = 'white')
```

```{r}
rufip_thin <- dismo::gridSample(st_coordinates(rufipogon), r = chelsa_raw[[2]]) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1,
         species = 'rufipogon')

sativa_thin <- dismo::gridSample(st_coordinates(sativa), r = chelsa_raw[[2]]) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1,
         species = 'sativa')

gbif_thin <- bind_rows(sativa_thin, rufip_thin)
      

extract(chelsa[['bio1']], gbif_thin) %>%
  bind_cols(gbif_thin, .) %>%
  ggplot(aes(bio1)) +
  geom_density(aes(y = after_stat(count), fill = species), alpha = 0.5)
```

Note how underrepresented China is!

### Other

genetic studies

-- good collection from oryzabase and others. rufipogon samples and indica/japonicas from china

```{r}
vars <- read_excel('12862_2018_1180_MOESM1_ESM.xls', skip = 2) %>%
  mutate(lat = parse_double(`Latitude*†`),
         lon = parse_double(`Longitude*†`),
         species = `Species/ecotype*`) %>%
  filter(!(is.na(lon) | is.na(lat))) %>%
  st_as_sf(coords = c('lon', 'lat'), crs = 4326) %>%
  select(species) %>%
  filter(species %in% c('indica', 'O. rufipogon', 'temperate japonica'))

ggplot() +
  geom_sf(data = vars, aes(color = species),
          size = 1) +
 # scale_color_brewer(palette = 'Spectral') +
  geom_sf(data = coasts, color = 'black')
```

These data are biased because sativas only come from China and rufipogon does not!

```{r}
extract(chelsa_raw[[c('bio1','bio5', 'gst')]], vars) %>%
  bind_cols(vars, .) %>%
  select(species, bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
 # scale_fill_brewer(palette = 'Spectral') +
  geom_density(aes(y = after_stat(count), fill = species), alpha = 0.5) +
  facet_wrap(~name, ncol = 1)
```

```{r}
vars_thinned <- vars %>%
  group_nest(species) %>%
  mutate(data = map(data, 
                    ~dismo::gridSample(st_coordinates(.x), 
                                       r = chelsa_raw[[2]]) %>%
                      as_tibble())
  ) %>%
  unnest(data) %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1)
```

```{r}
extract(chelsa_raw[[c('bio1','bio5', 'gst')]], vars_thinned) %>%
  bind_cols(vars_thinned, .) %>%
  select(species, bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
 # scale_fill_brewer(palette = 'Spectral') +
  geom_density(aes(y = after_stat(count), fill = species), alpha = 0.5) +
  facet_wrap(~name, ncol = 1)
```

So let's combine this with the GBIF occurrence above. It definitely helps us sample the temperate varieties better, but its still a minor influence relative to the numbers of gbif points

```{r}
# combine with gbif
comb <- bind_rows(vars_thinned, gbif_thin)

plot(comb)
extract(chelsa_raw[[c('bio1','bio5', 'gst')]], comb) %>%
    bind_cols(comb, .) %>%
  select(species, bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
  geom_density(aes(y  = after_stat(count), fill = species), position = 'stack', alpha = 0.5)+
  facet_wrap(~name, ncol = 1)

extract(chelsa_raw[[c('bio1','bio5', 'gst')]], comb) %>%
  bind_cols(comb, .) %>%
  filter(!(species %in% c('O. rufipogon', 'rufipogon'))) %>%
  select(species, bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
  geom_density(aes(y = after_stat(count), fill = species), position = 'stack', alpha = 0.5)+
  facet_wrap(~name, ncol = 1)

extract(chelsa_raw[[c('bio1','bio5', 'gst')]], comb) %>%
  bind_cols(comb, .) %>%
  filter(!(species %in% c('O. rufipogon', 'rufipogon'))) %>%
  select(species, bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
  geom_density(aes(fill = species), position = 'stack', alpha = 0.5)+
  facet_wrap(~name, ncol = 1)
```

```{r}
ggplot() +
  geom_sf(data = comb %>% st_crop(asia_bbox_sf), size = .5, aes(color = species)) +
  geom_sf(data = coasts)
```

These are predictions from a classifier that use climate data, so not exactly useful here but interesting to see. Aus is grown in summer before monsoon and harvested in fall -- not great quality but as a backup

```{r}
pred_var <- read_csv('Sup_table_3_per_crop/rice (asia).csv') %>%
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  select(ensemble)

ggplot(pred_var, aes(color = ensemble)) +
  geom_sf(size = 1, alpha = 0.5) +
  scale_color_brewer(palette = 'Spectral') +
  geom_sf(data = coasts, color = 'black')
```

```{r}
extract(chelsa[['bio5']], pred_var) %>%
  bind_cols(pred_var, .) %>%
  ggplot(aes(bio5)) +
  scale_fill_brewer(palette = 'Spectral') +
  geom_density(aes(y = after_stat(count), fill = ensemble), alpha = 0.5)

extract(chelsa[['bio5']], pred_var) %>%
  bind_cols(pred_var, .) %>%
  ggplot(aes(bio5)) +
  scale_fill_brewer(palette = 'Spectral') +
  geom_density(aes(y = after_stat(count), fill = ensemble), position = 'fill', alpha = 0.5)
```

```{r}
comb_final <- comb %>%
    filter(!(species %in% c('O. rufipogon', 'rufipogon'))) %>%
  bind_rows(pred_var) %>%
  st_coordinates() %>%
dismo::gridSample(r = chelsa_raw[[2]]) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1)


extract(chelsa_raw[[c('bio1','bio5', 'gst')]], comb_final) %>%
  bind_cols(comb_final, .) %>%
  select(bio1, bio5, gst) %>%
  pivot_longer(bio1:gst) %>%
  ggplot(aes(value)) +
  geom_density(alpha = 0.5)+
  facet_wrap(~name, ncol = 1)
```

```{r}
extract(chelsa_raw[[c('bio1','bio5', 'bio8', 'bio10', 'bio11', 'gst')]], comb_final) %>%
  bind_cols(comb_final, .) %>%
  st_drop_geometry() %>%
  remove_missing() %>%
  reframe(bio1 = quantile(bio1, c(0.025, 0.975), type = 8),
            bio5 = quantile(bio5, c(0.025, 0.975), type = 8),
            bio10 = quantile(bio10, c(0.025, 0.975), type = 8),
            bio8 = quantile(bio8, c(0.025, 0.975), type = 8),
            bio11 = quantile(bio11, c(0.025, 0.975), type = 8),
            gst = quantile(gst, c(0.025, 0.975), type = 8))

extract(chelsa_raw[[c('bio1','bio5', 'bio8', 'bio10', 'bio11', 'gst')]], comb_final) %>%
  bind_cols(comb_final, .) %>%
  st_drop_geometry() %>%
  remove_missing() %>%
  reframe(bio1 = quantile(bio1, c(0.1, 0.9), type = 8),
            bio5 = quantile(bio5, c(0.1, 0.9), type = 8),
            bio10 = quantile(bio10, c(0.1, 0.9), type = 8),
            bio8 = quantile(bio8, c(0.1, 0.9), type = 8),
            bio11 = quantile(bio11, c(0.1, 0.9), type = 8),
            gst = quantile(gst, c(0.1, 0.9), type = 8))
```

```{r}
plot(comb_final)

occurrence_background <- chelsa[[1]] %>% 
  crop(bbox_world) %>%
  spatSample(80000, na.rm = TRUE, as.points = TRUE, ext = world_bbox, values = FALSE, exhaustive = TRUE) %>%
  st_as_sf() #%>%
  mutate(extent = lyr.1,
         presence = as.numeric(extent > 0.1)) %>%
  dplyr::select(-lyr.1) %>%
  bind_cols(., terra::extract(chelsa, ., ID = FALSE)) %>%
  mutate(presence = factor(presence, levels = c(1, 0)))

buffer <- comb_final %>%
  st_buffer(dist = 500000) %>%
  st_union() %>%
  st_make_valid()

occ_dat <- occurrence_background %>% st_filter(buffer) %>%
  mutate(presence = 0) %>%
  bind_rows(comb_final) %>%
  bind_cols(., terra::extract(chelsa, ., ID = FALSE)) %>%
  mutate(presence = factor(presence, levels = c(1, 0)))

ggplot(occ_dat) +
  geom_sf(data = countries_world, color = NA) +
  geom_sf(size = 0.1, aes(color = factor(presence, levels = c(0, 1)))) +
  scale_color_manual(values = c('black', 'red'), name = 'Presence') + 
  theme_minimal() +
  geom_sf(data = buffer, fill = NA)
```

```{r}
occ_dat %>%
  st_drop_geometry() %>%
  pivot_longer(-presence) %>%
  ggplot(aes(value)) +
  geom_density(aes(fill = presence), alpha= 0.5) +
  facet_wrap(~name, scales = 'free')
```

## Satellite-derived occurrences

### International Rice Research Institute

Nelson and gumma, just lowland rice for asia... Andrew Nelson, Murali Krishna Gumma. A map of lowland rice extent in the major rice growing countries of Asia. 2015, 37p. IRRI, Los Banos, Philippines.

hard to verigy in china, maybe overpredictsw in norhteast china where there's wheat. also wetlands in indonesia

```{r fig.width=6, fig.height=5}
irri <- rast('data/data-raw/IRRI Asia Rice Extent Map/asia-rice-extent.tif') %>%
  aggregate(fact = 10) %>%
  mask(., resample(chelsa_mask, .)) %>%
  setNames('extent')

ggplot() +
  geom_stars(data = st_as_stars(irri)) +
  scale_fill_viridis_c(na.value = 'NA') +
  geom_sf(data = coasts %>% st_crop(st_as_stars(irri)), color = 'white')

ggplot() +
  geom_stars(data = st_as_stars(irri) > 0.1) +
  scale_fill_manual(values = c('grey', 'red')) +
  geom_sf(data = coasts %>% st_crop(st_as_stars(irri)), color = 'white')

ggplot() +
  geom_stars(data = st_as_stars(irri) > 0.01) +
  scale_fill_manual(values = c('grey', 'red'), na.value = NA, guide = FALSE) +
  geom_sf(data = coasts %>% st_crop(st_as_stars(irri)), color = 'white') +
  labs(title = 'Satellite-based lowland rice extent', caption = 'Nelson and Gumma (2015) "A map of lowland rice extent in the major rice growing countries of Asia"', x = '', y = '')

#ggplot() +
#  geom_stars(data = st_as_stars(irri) > 0) +
#  scale_fill_manual(values = c('grey', 'red'), na.value = NA) +
#  geom_sf(data = coasts %>% st_crop(st_as_stars(irri)), color = 'white')
```

```{r}
ggsave('irri_modis.png', height = 5, width = 6, bg = 'white')
```

```{r}
irri %>% resample(chelsa[[1]]) %>% c(chelsa) %>% as_tibble() %>% select(extent, gst) %>%
    remove_missing() %>%
  mutate(presence = extent > 0.01) %>%
  ggplot(aes(gst)) +
  geom_density(aes(y = after_stat(count), fill = presence), position = 'stack')
```

### Monfreda

Monfreda and Ramankutty -- I think this is just paddy as well. this is 2008, but there is an update 2012 version by ray, updated again more recently. -- but this is harvested area, which is problematic because you can have multiple harvest a year.

```{r}
# this is just "paddy rice" according to documentation
monfreda_area <- geodata::crop_monfreda('rice', 
                                        var = 'area_ha', 
                                        here('data/data-raw')) %>%
  st_as_stars() %>%
  st_crop(world_bbox_sf) %>%
  setNames('area_ha')

monfreda_fraction <- geodata::crop_monfreda('rice', var = 'area_f', here('data/data-raw')) %>%
  crop(., resample(chelsa_mask, .), mask = TRUE) %>% # does this clip polynesia?
  st_as_stars() %>%
  setNames('area_f')

monfreda_quality <- geodata::crop_monfreda('rice', var = 'area_q', here('data/data-raw')) %>%
  st_as_stars() %>%
  st_crop(world_bbox_sf) %>%
  setNames('area_q') %>%
  .[countries_world]

ggplot() +
  geom_stars(data = monfreda_fraction) +
  scale_fill_viridis_c() +
  geom_sf(data = coasts, color = 'white') 

ggplot() +
  geom_stars(data = monfreda_area > 0.001) +
  scale_fill_viridis_d() +
  geom_sf(data = coasts, color = 'white')

ggplot() +
  geom_stars(data = monfreda_quality) +
  scale_fill_viridis_c() +
  geom_sf(data = coasts_world, color = 'white')

ggplot() +
  geom_stars(data = monfreda_fraction > 0.05, downsample = ) +
  scale_fill_manual(values = c('grey', 'red'), na.value = NA, guide = FALSE) +
  geom_sf(data = coasts_world %>% st_crop(chelsa_mask), color = 'white') 
```

Combining Monfreda and GBIF data for single figure? No, doesn't really work.

```{r}
ggplot() +
    geom_sf(data = countries_world, color = 'white') +
  geom_stars(data = monfreda_fraction %>% mutate(area_f = if_else(area_f > 0.01, TRUE, NA)) %>% st_crop(st_bbox(sativa)), downsample = 0) +
  scale_fill_manual(values = 'red', na.value = NA, guide = FALSE) +
   geom_sf(data = sativa, size = 0.1, color = 'black') +
  geom_sf(data = coasts_world %>% st_crop(chelsa_mask), color = 'white') +
  theme_minimal()
```

```{r}
chelsa_10km <- rast(here('data/data-derived/chelsa_10km.nc')) %>%
  setNames(chelsa_names)

c(resample(chelsa_10km[['bio5']], rast(monfreda_fraction)), rast(monfreda_fraction)) %>% 
  mask(countries) %>% 
  as_tibble() %>%
  mutate(presence = lyr.1 > 0.01) %>%
  ggplot(aes(bio5)) +
  geom_density(aes(y = after_stat(count), fill = presence), position = 'stack')


c(resample(chelsa_10km[['bio1']], rast(monfreda_fraction)), rast(monfreda_fraction)) %>% 
  mask(countries) %>% 
  as_tibble() %>%
  mutate(presence = lyr.1 > 0.01) %>%
  ggplot(aes(bio1)) +
  geom_density(aes(y = after_stat(count), fill = presence), position = 'stack')
```

```{r}
chelsa_10km <- rast('data/data-derived/chelsa_10km.nc') %>%
  setNames(chelsa_names)
c(resample(chelsa_10km[[c('bio1', 'bio5', 'bio10', 'bio8', 'bio11', 'gst')]], rast(monfreda_fraction)), rast(monfreda_fraction)) %>% 
  mask(countries) %>% 
  as_tibble() %>%
  mutate(presence = lyr.1 > 0.01) %>%
  filter(presence == 1) %>%
  st_drop_geometry() %>%
  select(-presence)  %>%
  reframe(bio1 = quantile(bio1, c(0.025, 0.975), type = 8),
            bio5 = quantile(bio5, c(0.025, 0.975), type = 8),
            bio10 = quantile(bio10, c(0.025, 0.975), type = 8),
            bio8 = quantile(bio8, c(0.025, 0.975), type = 8),
            bio11 = quantile(bio11, c(0.025, 0.975), type = 8),
            gst = quantile(gst, c(0.025, 0.975)), type = 8)


c(resample(chelsa_10km[[c('bio1', 'bio5', 'bio10', 'bio8', 'bio11', 'gst')]], rast(monfreda_fraction)), rast(monfreda_fraction)) %>% 
  mask(countries) %>% 
  as_tibble() %>%
  mutate(presence = lyr.1 > 0.01) %>%
  filter(presence == 1) %>%
  st_drop_geometry() %>%
  select(-presence)  %>%
  reframe(bio1 = quantile(bio1, c(0.1, 0.9), type = 8),
            bio5 = quantile(bio5, c(0.1, 0.9), type = 8),
            bio10 = quantile(bio10, c(0.1, 0.9), type = 8),
            bio8 = quantile(bio8, c(0.1, 0.9), type = 8),
            bio11 = quantile(bio11, c(0.1, 0.9), type = 8),
            gst = quantile(gst, c(0.1, 0.9), type = 8))
```

### Ray

Ray is a more up-to-date version of Monfreda.

```{r}
ray <- read_stars('data/data-raw/HarvAreaYield_4Crops_95-00-05_Geotiff/Rice/Rice_2000_Area.tif')

ggplot() +
  geom_stars(data = ray > 0.05) +
  scale_fill_manual(values = c('grey', 'red'), na.value = 'white') +
  geom_sf(data = coasts_world, color = 'white') 
```

Lots of potential sources. [ChinaCropPhen1km](https://figshare.com/articles/dataset/ChinaCropPhen1km_A_high-resolution_crop_phenological_dataset_for_three_staple_crops_in_China_during_2000-2015_based_on_LAI_products/8313530/5) has rice from 2000-2015 daily at 1km. RiceAtlas is a census from 2010ish that's vectorized https://www.nature.com/articles/sdata201774 . Monfreda dissaggregates harvest area and yield census data proportionate to geospatial cropland mpas.[Source](https://iopscience.iop.org/article/10.1088/1748-9326/ac20f4)

### SPAM

SPAM is combination data, satellite, and model. Not ideal for our purposes because it uses climate data.

SPAM data high quality but uses preexisting crop suitability maps in their downscaling so its not independent. It also uses satellite maps of just cropland extent, not necessarily of rice.

> We estimate the crop suitable area (SuitArea) from GAEZv3.0 to consider the spatially varied potential suitability for different crops in terms of different thermal, moisture, and soil requirements as an allocating parameter. https://essd.copernicus.org/articles/12/3545/2020/

It's also from 2010, which is at the very end of the climate data range.

It gives 6 different crop/farming systems: A (all), H (high inputs), I (irrigated), L (low inputs), R (rainfed), S (subsistence)

```{r}
spam_area <- geodata::crop_spam('rice', var = 'phys_area', path = here('data/data-raw')) %>%
  st_as_stars() %>%
  st_crop(asia_bbox)

ggplot() +
  geom_stars(data = (spam_area)
) +
  scale_fill_viridis_c() +
  geom_sf(data = coasts, color = 'white') +
  facet_wrap(~attributes)
```

### Rice atlas

```{r}
rice_atlas_cal <- read_sf('data/data-raw/dataverse_files/RiceCalendar_v1/RiceCalendar_v1.shp') %>%
  st_make_valid() %>%
  st_crop(asia_bbox_sf)
rice_atlas_prod <- read_sf('data/data-raw/dataverse_files/RiceProduction_v1/RiceProduction_v1.shp') %>%
  st_make_valid() %>%
    st_crop(asia_bbox_sf)

ggplot() +
  geom_sf(data = rice_atlas_cal, aes(fill = NUM_CROP)) +
  scale_fill_distiller(palette = 'Spectral')
ggplot() +
  geom_sf(data = rice_atlas_prod, aes(fill = METHOD)) +
  scale_fill_brewer(palette = 'Spectral')
```

```{r}
c(rice_atlas_cal$NAME1, rice_atlas_cal$NAME2, rice_atlas_cal$NAME3)  %>% unique
```

```{r}
plot(rice_atlas_cal['PLANT_PK1'])
# convert to date as days since  january first, hence subtraction
rice_atlas_months <- rice_atlas_cal %>%
  mutate(across(PLANT_ST1:HARV_END3, ~as_date(na_if(.x, 0) - 1) %>% month(label = TRUE, abbr = FALSE)))
  
# full range, start of planting season to end of harvest
rice_atlas_months %>% 
  select(NAME1, PLANT_ST1, HARV_END1) %>%
  mutate(range = paste0(PLANT_ST1, '-', HARV_END1),
         area = st_area(geometry)) %>%
  st_drop_geometry() %>%
  count(range, wt = area) %>%
  arrange(-n)

# optimale range, peak planting to peak harvest
rice_atlas_months %>% 
  select(NAME1, PLANT_PK1, HARV_PK1) %>%
  mutate(range = paste0(PLANT_PK1, '-', HARV_PK1),
         area = st_area(geometry)) %>%
  st_drop_geometry() %>%
  count(range, wt = area) %>%
  arrange(-n)


# flowering range
rice_atlas_cal %>%
  mutate(across(HARV_ST1:HARV_END3, ~as_date(na_if(.x, 0) - 31) %>% month(label = TRUE, abbr = FALSE))) %>%
  select(NAME1, HARV_ST1,  HARV_END1) %>%
  mutate(range = paste0(HARV_ST1, '-', HARV_END1),
         area = st_area(geometry)) %>%
  st_drop_geometry() %>%
  count(NAME1, range, wt = area) %>%
  arrange(-n)

rice_atlas_cal %>%
  mutate(across(HARV_ST1:HARV_END3, ~as_date(na_if(.x, 0) - 31) %>% month(label = TRUE, abbr = FALSE))) %>%
  select(NAME1, HARV_PK1) %>%
  mutate(area = st_area(geometry)) %>%
  st_drop_geometry() %>%
  count(HARV_PK1, wt = area) %>%
  arrange(-n)

rice_atlas_cal %>%
  mutate(across(HARV_ST1:HARV_END3, ~as_date(na_if(.x, 0) - 31) %>% month(label = TRUE, abbr = FALSE))) %>%
  select(flower_peak = HARV_PK1) %>%
  ggplot() +
  geom_sf(aes(fill = flower_peak)) +
  scale_fill_brewer(palette = 'Spectral')
```

flower_months %\>%

pivot_longer(names_to = 'planting', values_to = 'month') %\>%

group_by(planting, month) %\>%

summarise()

```{r}
rice_atlas_cal %>%
  filter(COUNTRY == 'China', REGION == 'Sichuan')
```

```{r}
flower_months <- rice_atlas_cal %>%
  mutate(across(c(HARV_PK1, HARV_PK2, HARV_PK3), ~as_date(na_if(.x, 0) - 31) %>% month(label = TRUE, abbr = FALSE))) %>%
  select(flwr_pk1 = HARV_PK1,
         flwr_pk2 = HARV_PK2,
         flwr_pk3 = HARV_PK3)

flower_months %>%
  pivot_longer(-geometry, names_to = 'planting', values_to = 'month') %>%
  remove_missing() %>%
  group_by(planting, month) %>%
  summarise() %>%
   ggplot() +
  geom_sf(aes(fill = month)) +
  facet_wrap(~planting) +
  scale_fill_brewer(palette = 'Spectral')
```

```{r}
tmax <- list.files('~/Dropbox (UFL)/Data/CHELSA/CHELSA_V2/climatology', full.names = TRUE) %>%
  str_subset('max') %>%
  rast() %>%
 # aggregate(fact = 5) %>%
  crop(bbox)


flower_tmax1 <- imap(month.name, 
                    ~mask(tmax[[.y]], filter(flower_months, flwr_pk1 == .x))) %>%
  sprc() %>%
  mosaic() %>%
  setNames('flower_tmax1')

flower_tmax2 <- imap(month.name, 
                    ~mask(tmax[[.y]], filter(flower_months, flwr_pk2 == .x))) %>%
  sprc() %>%
  mosaic() %>%
  setNames('flower_tmax2')

flower_tmax3 <- imap(month.name, 
                    ~mask(tmax[[.y]], filter(flower_months, flwr_pk3 == .x))) %>%
  sprc() %>%
  mosaic() %>%
  setNames('flower_tmax3')

flower_tmax <- c(flower_tmax1, flower_tmax2, flower_tmax3) %>%
  resample(irri) %>%
  mask(irri > 0.01, inverse = TRUE, maskvalues = 1)

plot(flower_tmax)
hist(flower_tmax, maxcell = 3455136)
```

```{r}
plot(sum(tmax >= 33))
plot(sum(tmax >= 40))
```

```{r}
app(flower_tmax, quantile, .95, na.rm = TRUE, cores = 5)
```

great, tmax during flowering period is above 20 (lower optimum temp) and below 40, well below i mist cases. for first planting to upper limit is between 30 and 35, which again is the higher optimum for Japonica/indica. actually this perfectly matches above 33 dailty tmax decline of viability of pollen. So basically the prime planting is constrained by tmax 33, and secondary planting goes up to 35-37 -- again emphasis that hotter temps may not be huge restriction

So that works nicely when I can just select a single month. but what about a range? so I can get a numeric range of months and use that to subset? but instead of just twelve categories we get a whole bunch more! I guess if you parallelized it it wouldn't be too much of a problem because each individual polygon will be relatively small

```{r}
t2 <- here('data/data-derived/chelsa_5km.nc') %>%
  rast() %>%
  setNames(chelsa_names) %>%
  .[[c('bio1', 'bio5', 'bio10', 'bio8', 'gst')]] %>%
  resample(flower_tmax1) %>%
  c(flower_tmax1, flower_tmax2, flower_tmax3)

as_tibble(t2) %>% cor(use = 'pairwise.complete.obs')

```

\
\

So fairly good correlation between bio5/bio10 (\~.90) and flowering month temperature (primary planting). interestingly its less so with MAT (.69), bio8 (.745) and gst (.6745). Issues with this --- correlation dominated by the number of cells in each growing month. so if for example majority cell category is june, then that will dominate correlation and miss out on local discrepancies? Maybe doesn't matter, but still goes back to need to figure out what this analysis is actually for!, oh and this preliminarily is just for tmax, hence its correlation! duh

RICA

```{r}
rica_shp <- read_sf('data/data-raw/13468929/RICA_geometry/geom_rica.shp') %>%
  st_make_valid() %>%
  st_crop(asia_bbox_sf)

plot(rica_shp['COUNTRY'])

```

```{r}
rica_dat <- read_csv('data/data-raw/13468929/DT_rica_l.csv')
```

```{r}
rica <- rica_shp %>%
  select(OBJECTID) %>%
  right_join(rica_dat)

rica %>%
  ggplot() +
  geom_sf() +
  facet_wrap(~pr_season)

```

### Chinese Vegetation atlas

D'Alpoim Guedes and Bocinsky:

> One such useful dataset exists for the People's Republic of China---the China Vegetation Atlas, a 1:1,000,000 scale vegetation distribution map of China of data collected between the 1950s and 1980s ([*57*](https://www.science.org/doi/10.1126/sciadv.aar4491#core-R57))
>
> Because of the difficulty of accessing the China Vegetation Atlas in the United States, we have archived it in the Digital Archaeological Record (ID: 442484) at <https://doi.org/10.6067/XCV85B05BG>.
>
> The area where rice is grown in China expanded by 6.2 million hectares between 1949 and 1958 alone ([*58*](https://www.science.org/doi/10.1126/sciadv.aar4491#core-R58)). Between roughly 1960 and 1970, the introduction of dwarf varieties followed by hybrid rice further extended the area in which rice was cultivated. With the exception of a few cells, the distribution of rice is confined to the area south of the Yangtze River valley. Some low probability cells in Xinjiang, Inner Mongolia, and Heilongjiang represent expansions of the area under cultivation during the Great Leap Forward and following the introduction of new types of rice. Our analysis uses GDD values for nonhybrid and nondwarf varieties of rice. The extended range that post-1970 varieties are able to occupy may partially explain why a small percentage of rice occupies an area that is in lower niche probabilities ([Fig. 5](https://www.science.org/doi/10.1126/sciadv.aar4491#F5)).

```{r}
rice_ids <- read_excel('../../veget atlas china 2001 gis/veget atlas china 2001 code.xls') %>%
  filter(str_detect(tolower(`Vegetation formation and sub-formation`), 'rice'))

veg_atlas <- read_sf('../../veget atlas china 2001 gis/vegetation.shp') %>%
  dplyr::select(VEGE_ID) %>%
  mutate(rice = if_else(VEGE_ID %in% rice_ids$新编号, TRUE, FALSE)) %>%
  group_by(rice) %>%
  summarise(geometry = st_union(geometry)) %>%
  st_transform(4326)

ggplot() +
  geom_sf(data = veg_atlas, lwd = 0.01, color = NA, aes(fill = rice))
```

```{r}
ggplot() +
  geom_sf(data = veg_atlas, lwd = 0.01, color = NA, aes(fill = rice)) +
  geom_sf(data = vars %>% st_crop(veg_atlas))

cva <- rasterize(veg_atlas, chelsa[[1]], field = 'rice')
plot(cva)
c(cva, chelsa) %>%
  as_tibble() %>%
  remove_missing() %>%
  ggplot(aes(gst)) +
  geom_density(aes(y = after_stat(count), fill = rice), position = 'stack')
```

### Others

GFSAD30

# Archaeological rice data

We used rice occurrence data from archaeological sites using version 2 of the Rice Archaeological Database \@[@silva2015]. The data span the period from xxx to yyy. A total of zzz sites are included in the database, mainly from eastern China, Japan, Korea, and southeast Asia. These are generally records of botanical remains thought to be *O. sativa japonica* from archaeological sites. Some of these occurrence were likely wild-type *O. rufipogon* instead based on their timing. We removed one such extremely early occurrence from xxx as a likely outlier.

Also cleaned data from [@gutaker2020]

Stephens and fuller data ... but its pdf.

synthesis from [@longetal2022]

Actually for now don't use rice archaeological database directly, just derivatives, because of the odd file type making it difficult to extract the date information!

```{r}
rice <- read_sf('data/data-raw/Rice Archaeological Database.kml') %>%
  st_zm()

rice$Description[[10]] %>% str_split('<br>')
```

```{r arch-rice-data}
arch <- here('data/data-raw/Archaeological Rice Dataset.xlsx') %>%
  read_excel() %>%
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  rename(age = `Est._Date_Median_BC`) %>%
  mutate(age = age - 1950) %>%
  arrange(-age)

japan_arch <- read_csv('data/data-raw/sciadv.adc9171_data_s1.csv') %>%
  filter(USED == TRUE) %>% 
  st_as_sf(coords = c('Longitude', 'Laitude'), crs = 4326) # note "Laitude"



long <- here('data/data-raw/ScienceDirect_files_13Feb2023_15-12-15/1-s2.0-S1040618221005577-mmc2.xlsx') %>%
  read_excel(skip = 11, n_max = 260) %>%
  rename(lon = `Longitude (°E)`,
         lat = `Latitude (°N)`) %>%
  st_as_sf(coords = c('lon', 'lat'), crs = 4326) %>%
  st_crop(asia_bbox_sf) # some  points in africa?

gb2017 <- read_excel('data/data-raw/guedesbocinsky2018_crops_across_eurasia.xlsx') %>%
  filter(is.na(`Exclude?`) & (!is.na(Rice) | !is.na(`Rice (wild)`))) %>% # just rice
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  select(Site, Period, Notes, labCode = `Lab sample identifier`, Material, `14C date on cereal?`, age_lower = `Age range lower (BP)`, age_upper = `Age range upper (BP)`, age_14c = `14C age BP`, sigma = `1-sigma uncertainty`)

ggplot() +
      geom_sf(data = countries, color = 'white', lwd = 0.1) +
      geom_sf(data = arch, color = 'orange', size = 2.5) +
        geom_sf(data = long, color = 'yellow', size = 2) +
  geom_sf(data = rice, size = 1) +
    geom_sf(data = japan_arch, color = 'red', size = .5) +
  geom_sf(data = gb2017, color = 'white', size = 0.5)

```

```{r}
library(mapview)

mapview(arch, col.regions = 'orange', label = 'Site') + mapview(long, col.regions = 'yellow', label = 'Archaeological site', cex = 5) +
  mapview(gb2017, col.regions = 'white', label = 'Site', cex = 2)
  
```

Sites in Gutaker but not gb2017

```{r}
arch %>%
  count(site)
rarch %>%
  filter(!(Site %in% gb2017$Site)) %>%
  mapview(arch, col.regions = 'orange', label = 'Site') + mapview(long, col.regions = 'yellow', label = 'Archaeological site', cex = 5) +
  mapview(gb2017, col.regions = 'white', label = 'Site', cex = 2)
```

```{r}

gb2017 %>%
  filter(Site == 'Ban Chiang') %>% plot
arch_dat %>%
  filter(Site == 'Ban Chiang') %>% st_distance()
plot(gb2017)
plot(long)
```

```{r}
hist(arch$age)
```

Harmonize!

```{r}
arch %>%
  filter(Country == 'MON')

gb2017 %>%
  filter(str_detect(`Archaeological site`, 'Karakorum'))

gb2017 %>%
  mutate(age = -1 * age_14c) %>%
  st_drop_geometry() %>%
bind_rows(arch, .id = 'source') %>%
    select(Site, age) %>%
  arrange(Site, age)
```

```{r}
library(readxl)
arch_dat <- bind_rows(
  gutaker = arch %>% mutate(Site = str_replace(Site, '_', ' '), cal_age = age) %>%
    select(Site, cal_age), 
  sciadv = gb2017 %>%
    mutate(age_period = -1 * (age_lower + age_upper) / 2,#  this looses some sites with no lower/upper range? 
          age_14c =  -1 * age_14c) %>%
    select(Site, age_14c, age_period), ## note this stopgap, because ages arent negative if 14c
  long = long  %>%
    rename(Site = `Archaeological site`, age_14c = `Uncalibrated radiocarbon age (14C BP)`, cal_age = `Calibrated median (BCE/CE)`) %>%
    select(Site, age_14c, cal_age, LabCode = `Lab ID`) %>%
    mutate(age_14c = age_14c * -1, cal_age = cal_age - 1950),
  japan = japan_arch %>% 
    mutate(age_14c = C14Age * -1, 
           bc_ad = str_sub(MedianDate, -2),
           cal_age = ifelse(bc_ad == 'AD', parse_number(MedianDate) - 1950, -1 * parse_number(MedianDate) - 1950)) %>%
    select(Site = SiteName_en, age_14c, cal_age, LabCode),
  .id = 'source') %>%
  arrange(Site, age_14c, cal_age, age_period, source) %>%
  select(source, Site, age_14c, cal_age, age_period, LabCode)
  #select(source, Site, age) %>%
  #filter(!is.na(age)) %>%
  #group_by(Site, age) %>%
  #slice(1) %>%
  #ungroup() %>%
#  filter(!(Site %in% c('An_Son', 'Anlong_Phdao', 'Arami_Shellmidden', 'Bai_Man', 'Binh_Ta',
 #                      'Cangdi (CD)', 'Chengjiazhuang'))) %>%
 # filter(str_detect(Site, '_', negate = TRUE))


sciadv_remove <- arch_dat %>%
  filter(source %in% c('sciadv', 'long')) %>%
  select(Site, age_14c) %>%
  st_drop_geometry() %>%
  filter(duplicated(.) & !is.na(age_14c)) %>%
  mutate(source = 'sciadv')

sciadv_removePoeriod <- arch_dat %>%
  filter(source %in% c('sciadv', 'long')) %>%
  filter(source == 'sciadv' & )
  select(Site, age_14c) %>%
  st_drop_geometry() %>%
  filter(duplicated(.) & !is.na(age_14c)) %>%
  mutate(source = 'sciadv')

t1 <- arch_dat %>%
  filter(source != 'gutaker') %>%
  anti_join(sciadv_remove)



ggplot() +
      geom_sf(data = countries, color = 'white', lwd = 0.1) +
      geom_sf(data = filter(t1, source == 'sciadv', !is.na(age_14c)), color = 'orange', size = 2) +
        geom_sf(data = filter(t1, source == 'long'), color = 'yellow', size = 1) +
    geom_sf(data = filter(t1, source == 'japan'), color = 'red', size = .5)

  1955 - 1827

  t1 %>%
    group_by(Site, source) %>%
    summarise(geometry = geometry[1]) %>%
    plot
  
  t1_sciadv <- filter(t1, source == 'sciadv') %>%
    group_by(Site) %>%
    summarize()
    t1_long <- filter(t1, source == 'long') %>%
          group_by(Site) %>%
    summarize()
  t1_japan <- filter(t1, source == 'japan') %>%
        group_by(Site) %>%
    summarize()

c(st_filter(t1_sciadv, t1_long, 10000, .predicate = st_is_within_distance)$Site ,
st_filter(t1_long, t1_sciadv, 10000, .predicate = st_is_within_distance)$Site  ,
st_filter(t1_sciadv, t1_japan, 10000, .predicate = st_is_within_distance)$Site  ,
st_filter(t1_japan, t1_sciadv, 10000, .predicate = st_is_within_distance)$Site  ) %>%
  unique() 



plot(t1_long)  

arch_dat %>%
  anti_join(gutaker_remove) %>%
  select(Site, age, source, -Country) %>%
  write_xlsx('archaeology_data_joined_initial_v3.xlsx')
```

```{r}
arch_dat <- bind_rows(
  gutaker = arch, 
  sciadv = gb2017 %>%
    mutate(age = -1 * (age_lower + age_upper) / 2), # this looses some sites with no lower/upper range?
  long = long  %>%
    rename(Site = `Archaeological site`, age = `Calibrated median (BCE/CE)`) %>%
    select(Site, age) %>%
    mutate(age = age - 1950),
  japan = japan_arch %>% 
    mutate(age = parse_number(MedianDate),
           bc_ad = str_sub(MedianDate, -2),
           cal_age ) %>%
    select(Site = SiteName_en, age),
  .id = 'source') %>%
  arrange(Site) %>%
  select(source, Site, age) %>%
  filter(!is.na(age)) %>%
  group_by(Site, age) %>%
  slice(1) %>%
  ungroup() %>%
  filter(!(Site %in% c('An_Son', 'Anlong_Phdao', 'Arami_Shellmidden', 'Bai_Man', 'Binh_Ta',
                       'Cangdi (CD)', 'Chengjiazhuang'))) %>%
  filter(str_detect(Site, '_', negate = TRUE))

plot(arch_dat)

```

```{r}

gb2017 %>%
  mutate(boot = runif(age_lower, age_upper))
```

also just extract dates with 14c info for us to recalibrate

Lots of samples from Japan! But these are raw sites, thinning should help with this.

```{r}
ggplot(arch_dat, aes(age)) +
  geom_histogram(aes(fill = source))

arch_dat %>% filter(age < -10000)
```

```{r}
arch_dat %>%
  st_join(countries) %>%
  ggplot(aes(age)) +
  geom_histogram(aes(fill = name))
```

doi:10.6067/XCV8MK6G05 -- crops from guedes and bocinsky

**Prehistoric evolution of the dualistic structure mixed rice and millet farming in China<https://doi.org/10.1177/0959683617708455>**

calibration and resampling

```{r}
arch_dat2 <- bind_rows(
  sciadv = gb2017 %>%
    filter(!is.na(age_14c)) %>%
    select(Site, age_14c, sigma),
  long = long  %>%
    rename(Site = `Archaeological site`, age_14c = `Uncalibrated radiocarbon age (14C BP)`, sigma = `Radiocarbon dating uncertainty (yr)`) %>%
    select(Site, age_14c, sigma),
  japan = japan_arch %>% 
    select(Site = SiteName_en, age_14c = C14Age, sigma = C14AgeError),
  .id = 'source') %>%
  arrange(Site) %>%
  group_by(Site, age_14c, sigma) %>%
  slice(1) %>%
  ungroup()

plot(arch_dat2)
```

```{r}
plot(arch_dat2 %>% filter(source != 'japan'))


arch_dat2 %>% mutate(time = time * -1) %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE) %>% %>%
  filter(tmax > 39)
  
```

```{r}
km_interp_c14 %>%
  select(tmax, time) %>%
  filter(tmax > 40.5) %>%
  ggplot() + 
    geom_sf(data = countries) +
  geom_sf(aes(color = time), jitter = TRUE)

```

```{r}
library(rcarbon)
library(eks)
cal <- calibrate(arch_dat2$age_14c, arch_dat2$sigma)
binsense(cal, arch_dat2$Site, h = c(0, 100, 200), timeRange = c(10000, 0))
rice_bins <-  binPrep(sites = arch_dat2$Site, ages = arch_dat2$age_14c, h = 100)

bin_pts <- arch_dat2 %>%
  mutate(bin = rice_bins) %>%
  select(bin) %>%
  group_by(bin) %>%
  slice(1) %>%
  ungroup()

boot <- cal %>% 
  sampleDates(nsim = 10000, boot = TRUE, bins = rice_bins, verbose = FALSE) %>%
  .$sdates %>%
  t() %>%
  as_tibble() %>%
  bind_cols(bin_pts, .) %>%
  mutate(obs = 1:n()) %>%
  pivot_longer(-c(bin, obs, geometry), names_to = 'rep', values_to = 'time')

## phase_sites
phases <- gb2017 %>%
  filter(is.na(age_14c)) %>%
  filter(!is.na(age_lower)) %>%
  mutate(samp = map2(age_lower, age_upper, #upper needs to be min not max
                     ~runif(10000, min = .y, max = .x) %>% round()),
          samp = map(samp, ~tibble(time = .x, rep = paste0('V', seq_along(.x))))) %>% 
 select(Site, samp) %>%
  mutate(obs = 1:n()) %>%
   unnest(samp) %>% 
  remove_missing()


km_interp_c14 <- boot %>%
  bind_rows(phases) %>%
  select(rep, time, geometry) %>%
  mutate(time = time * -1) %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE) %>%
  mutate(rep = c(boot$rep, phases$rep)) %>%
  remove_missing() # some dates are earlier than trace


test_eks <- km_interp_c14 %>%
    st_drop_geometry() %>%
  filter(time < -5000) %>%
  select(rep, MAT) %>%
  group_by(rep) %>%
  tidy_kde() 

test_eks2 <- km_interp_c14 %>%
    st_drop_geometry() %>%
  filter(time >= -5000, time <= -2000) %>%
  select(rep, MAT) %>%
  group_by(rep) %>%
  tidy_kde()

test_eks3 <- km_interp_c14 %>%
    st_drop_geometry() %>%
  filter(time <= -2000) %>%
  select(rep, MAT) %>%
  group_by(rep) %>%
  tidy_kde()

test_eks4 <- km_interp_c14 %>%
    st_drop_geometry() %>%
  filter(time <= -2000) %>%
  select(rep, tmax) %>%
  group_by(rep) %>%
  tidy_kde()

ggplot(test_eks, aes(MAT, estimate)) +
     geom_line(alpha = 0.01, aes(group = rep)) +
  geom_line(data = test_eks2, alpha = 0.01, aes(group = rep), color = 'red')

ggplot(test_eks3, aes(MAT, estimate)) +
     geom_line(alpha = 0.01, aes(group = rep))
ggsave('mat_arch_1d.png', width = 5, height = 3)

ggplot(test_eks4, aes(tmax, estimate)) +
     geom_line(alpha = 0.01, aes(group = rep))
ggsave('tmax_arch_1d.png', width = 5, height = 3)
```

```{r}
km_interp_c14 %>%
  st_drop_geometry() %>%
  group_by(rep) %>%
  summarise(test = quantile(MAT, 0.99)) %>%
  pull(test) %>% hist

km_interp_c14 %>%
  st_drop_geometry() %>%
  group_by(rep) %>%
  summarise(test = quantile(tmax, 0.99)) %>%
  pull(test) %>% hist
```

```{r}
km_interp_c14 %>% pull(time) %>% hist
```

```{r}
test_eks2d <- km_interp_c14 %>%
    st_drop_geometry() %>%
    filter(rep %in% paste0('V', 1:500)) %>%
  filter(time < -5000) %>%
  select(MAT, tmax, rep) %>%
  group_by(rep) %>%
  tidy_kde()

test_eks2d_2 <- km_interp_c14 %>%
    st_drop_geometry() %>%
    filter(rep %in% paste0('V', 1:500)) %>%
  filter(time >= -5000, time <= 2000) %>%
  select(MAT, tmax, rep) %>%
  group_by(rep) %>%
  tidy_kde()


ggplot(test_eks2d, aes(MAT, tmax)) +
  geom_contour_ks(aes(group = rep), cont = c(97.5), alpha = 0.05) +
    geom_contour_ks(data = test_eks2d_2, aes(group = rep), cont = c(97.5), alpha = 0.05, color = 'red') +
  coord_equal()
```

```{r}
ggsave('prepost_5k_975.png', height = 5, width = 5)
```

```{r}
km_interp_c14 %>%
#  filter(rep == 'V1') %>%
ggplot(aes(MAT, group = rep)) +
  geom_density(alpha = 0.05)

km


```

what about the phase sites? need to bootstrap uniform dist. Sample sites with replacement, then sample a uniform date from each?

```{r}
tst <- gb2017 %>%
  filter(is.na(age_14c)) %>%
  filter(!is.na(age_lower)) %>%
  mutate(samp = map2(age_lower, age_upper, ~runif(10, min = .y, max = .x) %>% round())) %>% # upper needs to be min not max
  unnest(samp) %>% select(samp)
  # these sites have upper ages larger than lower ages -- are these BP or CE?
  tst[c(166, 215, 206, 247, 248, 292),]
```

```{r}
library(rcarbon)

japan_arch %>% count(SiteName_en) %>% arrange(-n)
japan_arch %>% ggplot(aes(C14Age)) +
  geom_histogram(aes(fill = SiteName_en), show.legend = FALSE)
DK.bins
cal <- calibrate(japan_arch$C14Age, japan_arch$C14AgeError, id = japan_arch$ID)

binsense(cal, japan_arch$SiteName_en, h = seq(0,500,50), timeRange = c(4000, 0))
DK.bins = binPrep(sites=japan_arch$SiteName_en,ages=japan_arch$C14Age,h=100)

plot(cal[4])

class(cal[2])
test<-cal %>% 
  sampleDates(nsim = 1000, boot = TRUE, bins = DK.bins) %>%
  .$sdates %>%
  t() %>%
  as_tibble()
test

t2 <- japan_arch %>%
  mutate(bin = DK.bins) %>%
  select(bin) %>%
  unique() %>%
  bind_cols(test) %>%
  mutate(date = 1:n()) %>%
  pivot_longer(-c(bin, date, geometry), names_to = 'rep', values_to = 'time') %>%
    mutate(period = time < 1000)

km_interp_c14 <- t2 %>%
  mutate(time = time * -1) %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE)%>%
    mutate(rep = t2$rep)
  
library(eks)

test_eks <- km_interp_c14 %>%
    st_drop_geometry() %>%
  select(rep, MAT) %>%
  group_by(rep) %>%
  tidy_kde()

# for multiple time periods
# test_eks <- km_interp_c14 %>%
#     st_drop_geometry() %>%
#   mutate(rep = t2$rep, period = t2$period) %>% 
#   group_by(period) %>%
#   nest() %>%
#   mutate(kde = map(data, ~select(.x, rep, tmax) %>%
#     group_by(rep) %>%
#   tidy_kde())) %>%
#   select(period, kde) %>%
#   unnest(kde)

ggplot(test_eks, aes(MAT, estimate, group = rep)) +
         geom_line(alpha = 0.05)

#ggplot(test_eks, aes(tmax, estimate, group = interaction(rep, period), color = period)) +
#         geom_line(alpha = 0.05)

km_interp_c14 %>%
#  filter(rep == 'V1') %>%
ggplot(aes(MAT, group = rep)) +
  geom_density(alpha = 0.05)

ggplot(km_interp_c14 %>% filter(rep %in% c('V1', 'V2','V3')), aes(time, MAT)) +
  geom_point() +
  facet_wrap(~rep)
```

# Climate data

## Contemporary climate

We used high-resolution gridded climate data from CHELSA V2 [@brun2022]. CHELSA is a quasi-mechanistic topo-climatic downscaling algorithm. It uses raw outputs from the ERA-5 reanalysis with additional bias correction by GPCC and xxx.CHELSA performs much better than other global gridded climate products like WorldClim or TerraClim, particularly in mountainous areas, and its use of high quality reanalysis data rather than unprocessed weather station data ensures further accuracy and internal consistency between the variables.

The monthly mean climatologies for precipitation and minimum and maximum temperature were post processed into the standard 19 bioclimatic variables, with additional variables relating to factors like soil moisture, growing season length, and humidity. These data span the period 1980-2010 at a 1km resolution. We aggregated the 1km data to 5km resolution to better sample the landscape-scale climate patterns and to ameliorate the false precision of using 1km climate data with uncertain occurrence geolocations.

```{r load-chelsa, cache = TRUE}
chelsa_files <- list.files('../../CHELSA_V2_bio_clim', 
                           full.names = TRUE)[c(1, 2:20, 31:33, 40:46, 48:50, 52:59, 67:70)]

chelsa_names <- chelsa_files %>% 
  str_split('_') %>% 
  purrr::map(~.x[5:7]) %>%
  purrr::map(~if_else(.x %in% c("1981-2010", "V.2.1.tif"), NA, .x)) %>%
  purrr::map_chr(str_flatten, collapse = '_', na.rm = TRUE)

chelsa_raw <- terra::rast(chelsa_files) %>%
  setNames(chelsa_names)

chelsa_5km <- aggregate(chelsa_raw, fact = 5, cores = available_cores, na.rm = TRUE)
chelsa_10km <- aggregate(chelsa_raw, fact = 10, cores = available_cores, na.rm = TRUE)

chelsa_5km_asia <- crop(chelsa_5km, bbox)
chelsa_10km_asia <- crop(chelsa_10km, bbox)

# the gsp needs to be thresholded because of some extremely high values , like 100000!

writeCDF(chelsa_5km, here('data/data-derived/chelsa_5km.nc'), overwrite = TRUE, zname = 'var')
writeCDF(chelsa_10km, here('data/data-derived/chelsa_10km.nc'), overwrite = TRUE, zname = 'var')
writeCDF(chelsa_5km_asia, here('data/data-derived/chelsa_5km_asia.nc'), overwrite = TRUE, zname = 'var')
writeCDF(chelsa_10km_asia, here('data/data-derived/chelsa_10km_asia.nc'), overwrite = TRUE, zname = 'var')
```

## Future climate projections

We acquired downscaled projections of future climate from the CMIP6 archive, also downscaled using the CHELSA algorithm [@brun2022].

```{r}
cmip6_85 <- list.files('~/Dropbox (UFL)/CHELSA_CMIP6/ssp585/', full.names = TRUE) %>%
  terra::rast() %>%
  aggregate(fact = 5, mean, cores = available_cores) %>%
  setNames(chelsa_names[2:20]) %>%
  terra::crop(bbox)

cmip6_70 <- list.files('~/Dropbox (UFL)/CHELSA_CMIP6/ssp370/', full.names = TRUE) %>%
  terra::rast() %>%
  aggregate(fact = 5, mean, cores = available_cores) %>%
  setNames(chelsa_names[2:20]) %>%
  terra::crop(bbox)

cmip6_26 <- list.files('~/Dropbox (UFL)/CHELSA_CMIP6/ssp126/', full.names = TRUE) %>%
  terra::rast() %>%
  aggregate(fact = 5, mean, cores = available_cores) %>%
  setNames(chelsa_names[2:20]) %>%
  terra::crop(bbox)

cmip6_85[['bio3']] <- cmip6_85[['bio3']] * 100
cmip6_70[['bio3']] <- cmip6_70[['bio3']] * 100
cmip6_26[['bio3']] <- cmip6_26[['bio3']] * 100

#writeCDF(cmip6, here('data/data-derived/chelsa_cmip6_5km.nc'), overwrite = TRUE, zname = 'var')

writeCDF(cmip6_85, here('data/data-derived/chelsa_cmip6_85_5km.nc'), overwrite = TRUE, zname = 'var')
writeCDF(cmip6_70, here('data/data-derived/chelsa_cmip6_70_5km.nc'), overwrite = TRUE, zname = 'var')
writeCDF(cmip6_26, here('data/data-derived/chelsa_cmip6_26_5km.nc'), overwrite = TRUE, zname = 'var')
```

```{r}
plot(cmip6_26)
```

## Paleoclimate reconstructions

Including the global temperature reconstruction of [@10.5194/cp-18-2599-2022;\@10.5281/zenodo.6426332]. Downscaled climate models from Envirem and paleoclim.

```{r erb, fig.width = 6, fig.height = 5}
erb_rotated <- read_ncdf(here('data/data-raw/holocene_reconstruction.nc'), 
                              var = 'recon_tas_mean') %>%
                           st_set_crs(4326)
                         
times <- st_get_dimension_values(erb_rotated, 'ages')

floor_mil   = function(value){ return(value - value %% 1000) }
floor_cen   = function(value){ return(value - value %% 100) }

centuries <- floor_cen(1949.5 - times)
mil <- floor_mil(1949.5 - times)

erb <- erb_rotated %>%  
  as('SpatRaster') %>%
  rotate() %>%
  tapp(mil, fun = mean) %>%
  st_as_stars(crs = 4326) %>%
  st_set_dimensions('band', names = 'time', 
                    values = unique(mil) / 1000 - 1) %>%
  setNames('tas') %>%
  st_crop(asia_bbox) %>%
  mutate(tas = units::set_units(tas, degree_c)) %>%
  filter(time >= -8)

erb_decadal <- erb_rotated %>%  
  as('SpatRaster') %>%
  rotate() %>%
  st_as_stars(crs = 4326) %>%
  st_set_dimensions('band', names = 'time', 
                    values = -1 * (times + 0.5)) %>%
  setNames('tas') %>%
 st_crop(asia_bbox) %>%
  mutate(tas = units::set_units(tas, degree_c))

trace <- list.files('../../Data/TraCE-TREFHT', full.names = TRUE) %>%
  map(~read_ncdf(., var = 'TREFHT', eps = 0.01, make_time = FALSE) %>% 
        st_crop(asia_bbox_sf)) %>%
  do.call(c, .) %>%
  mutate(TREFHT = units::set_units(TREFHT, 'degree_C')) %>%
  st_set_dimensions(names = c('x', 'y', 'time'))
length(st_get_dimension_values(trace, 'time'))

trace_mean_5bp_3bp <- trace %>% # this is mean monthly temperature, not mean annual temperature
  filter(between(time, -5, -3)) %>%
  st_apply(1:2, mean) %>%
  st_warp(slice(erb, 'time', 1), use_gdal = TRUE, method = 'average') %>%
  setNames('tas') %>%
  mutate(tas = units::set_units(tas, degree_C))

plot(trace_mean_5bp_3bp)
```

Others? PMIP3/TRACE/CHELSA-TRACE

### CHELSA TRACE

```{r}
trace_order <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01', 
                          full.names = FALSE) %>%
  str_sub(23, -10) %>% 
  as.numeric() %>% 
  order()

trace_tmp <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01', 
                        full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time')

trace_prc <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio12', 
                        full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time')

trace_tmax <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio05', 
                         full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time') 

trace_tmin <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio06', 
                         full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time') 

chelsa_trace <- c(trace_prc, trace_tmp, trace_tmax, trace_tmin) %>%
  st_set_dimensions('time', values = seq(-12, 0, 0.1) * 1000, names = 'time') %>%
  setNames(c('TP', 'MAT', 'tmax', 'tmin'))
```

# Harmonization

```{r}
km_interp <- arch_dat %>%
  select(age) %>%
  mutate(time = age) %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE) 

km_interp %>%
  mutate(mil = (time - time %% 1000) / 1000 + 1) %>%
  filter(mil > -10) %>%
  ggplot(aes(MAT, TP)) +
  geom_point() +
  facet_wrap(~mil)

km_interp %>%
  mutate(mil = (time - time %% 1000) / 1000 + 1) %>%
  filter(mil > -10) %>%
  ggplot(aes(tmax, tmin)) +
  stat_density_2d(contour_var = 'ndensity', 
                  geom = 'polygon',
                  aes(alpha = after_stat(level))) +
 # geom_density2d(contour_var = 'ndensity') +
  facet_wrap(~mil, nrow = 2) +
  coord_equal()
```

```{r}
km_interp %>%
  mutate(var = st_coordinates(geometry)[,1] > 97) %>%
  select(var) %>%
  plot
ggplot(arch_dat) +
  geom_sf() +
  coord_sf()

hist(st_coordinates(arch_dat)[,1])
```

```{r}
arch_dat %>%
  filter(source != 4) %>% 
  pull(age) %>%
  hist
```

```{r}
arch_dat %>%
  arrange(-age) %>%
 # filter(source != '4') %>%
  filter(age > -11000) %>%
  ggplot() +
  geom_sf(data = countries %>% st_crop(st_bbox(arch_dat)), color = 'white') +
  geom_sf(aes(color = age), size = 1.5, alpha = 0.75) +
  scale_color_viridis_c(direction = -1) +
  theme_minimal()
```

## Sample points

We thinned the occurrence data to minimize influences from sampling biases. We select one sample per 10km grid in the predictor data [@dismo]. Because we do not have true absence data for past and present rice occurrences, we generated `n_background` latitude-weighted random background points on land surfaces. This allows us to estimate the relative suitability for the given crop with respect to the global climatic baseline.

We sample everywhere to get background points, and do not ignore places with occurrences. threshold of 0.1 to 0.2 from Watson et al 2015 and singh et al 2017

should sample bg points within 100km buffer of presences, and/or convex hull

```{r}
set.seed(1234567)
#sat_samp_pts <- dismo::gridSample(st_coordinates(sativa), r = as(irri, 'Raster')) %>% 
#  as_tibble() %>%
#  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
#  mutate(presence = 1)

dat <- spatSample(irri, 100000, na.rm = TRUE, as.points = TRUE) %>%
  st_as_sf() %>%
  mutate(presence = as.numeric(extent > 0.2)) %>%
  dplyr::select(-extent) %>%
  bind_cols(., terra::extract(chelsa, ., ID = FALSE)) %>%
  mutate(presence = factor(presence, levels = c(1, 0)))
  
ggplot(dat) +
  geom_sf(data = countries, color = NA) +
  geom_sf(size = 0.1, aes(color = factor(presence, levels = c(0, 1)))) +
  scale_color_manual(values = c('black', 'red')) + 
  geom_sf(data = sat_samp_pts, color = 'green', size = 0.1) +
  theme_minimal()
```

same thing but for monfreda

```{r}
set.seed(1234567)
world_bbox <- ext(-130, 155, -55, 60)

dat <- monfreda_fraction %>%
  rast() %>%
  mask(., resample(chelsa[[1]], .)) %>%
  spatSample(30000, na.rm = TRUE, as.points = TRUE, ext = world_bbox) %>%
  st_as_sf() %>%
  mutate(extent = lyr.1,
         presence = as.numeric(extent > 0.1)) %>%
  dplyr::select(-lyr.1) %>%
  bind_cols(., terra::extract(chelsa, ., ID = FALSE)) %>%
  mutate(presence = factor(presence, levels = c(1, 0)))
  
ggplot(dat) +
  geom_sf(data = countries, color = NA) +
  geom_sf(size = 0.1, aes(color = factor(presence, levels = c(0, 1)))) +
  scale_color_manual(values = c('black', 'red')) + 
 # geom_sf(data = sat_samp_pts, color = 'green', size = 0.1) +
  theme_minimal()
```

```{r}
dat_filtered <- dat %>%
  filter(presence == 1) %>%
  st_buffer(dist = 500000) %>%
  st_union() %>%
  st_make_valid() %>%
  st_filter(dat, .)

dat <- dat_filtered

table(dat_filtered$presence)

ggplot(dat_filtered) +
  geom_sf(data = countries, color = NA) +
  geom_sf(size = 0.1, aes(color = factor(presence, levels = c(0, 1)))) +
  scale_color_manual(values = c('black', 'red')) + 
  geom_sf(data = sat_samp_pts, color = 'green', size = 0.1) +
  theme_minimal() +
  geom_sf(data = buffer, fill = NA)
```

```{r}
save(dat, occ_dat, erb, erb_decadal, trace_mean_5bp_3bp, arch_dat, long, gb2017, rufipogon, sativa, sat_samp_pts, km_interp,
     file = 'data/data-derived/data_prepped.RData')
```

# Extras

Use cva to choose a reasonable detection threshold for IRRI data.

```{r}
cva <- rasterize(veg_atlas, irri, field = 'rice')
plot(cva)

c(irri, cva) %>%
  as_tibble() %>%
  remove_missing() %>%
  ggplot(aes(rice, `asia-rice-extent`)) +
  geom_boxplot()

library(probably)
threshold_data <- c(irri, cva) %>%
  as_tibble() %>%
  remove_missing() %>%
  mutate(rice = as.factor(rice)) %>% 
  threshold_perf(rice, `asia-rice-extent`, thresholds = seq(.005, .25, by = 0.005), event_level = 'second')

threshold_data <- threshold_data %>%
  filter(.metric != "distance") %>%
    filter(.metric != "j_index") %>%

  mutate(group = case_when(
    .metric == "sens" | .metric == "spec" ~ "1",
    TRUE ~ "2"
  ))

ggplot(threshold_data, aes(x = .threshold, y = .estimate, color = .metric, alpha = group)) +
  geom_line() +
  theme_minimal() +
  scale_color_viridis_d(end = 0.9) +
  scale_alpha_manual(values = c(.4, 1), guide = "none") +
  scale_x_continuous(breaks = seq(0, .25, .02)) +
  geom_vline(aes(xintercept = .02), linetype = 2)
```

So in this case the match isn't that great. what about monfreda? monfreda seems worse, especially in the lower end of the sensitivity. as the threshold goes up, we end up missing a lot of the true positives. SPAM?

```{r}
irri %>%
  crop(veg_atlas) %>%
  `>`(.02) %>%
  plot()

irri %>%
  crop(veg_atlas) %>%
  `>`(.05) %>%
  plot()
```

```{r}
sativa_rast <- rasterize(st_coordinates(sativa), irri, background = 0)
plot(sativa_rast)
plot((irri > 0.01) == sativa_rast)
plot(irri)
plot(sativa, add = TRUE, pch = '.')
plot((irri > 0.01))
plot(sativa, add = TRUE, pch = '.')


plot(sativa_rast /10 + irri)
plot((sativa_rast / 10 + irri) >= .1)
plot(irri >= .1)

```

```{r}
app(irri > .5, sum) %>%
  plot

map(seq(0, 1, .05), ~ irri > .x) %>%
  do.call(c, .) %>%
  plot
```

\### Beyer et al data

```{r}
#hadcm3
#devtools::install_github("EvolEcolGroup/pastclim")
#citation("pastclim")
#help("Beyer2020")
biovars <- c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')[-c(2:3)]
library(pastclim)
set_data_path(path_to_nc = here('data/data-raw/beyer/'))
get_vars_for_dataset(dataset = "Beyer2020")
get_vars_for_dataset(dataset = "Krapp2021")

download_dataset(dataset = "Beyer2020", bio_variables = biovars)
download_dataset(dataset = "Krapp2021", bio_variables = biovars)

climate_region <- region_series(
  time_bp = list(min = -6000), 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")

climate_region8 <- region_slice(
  time_bp = -8000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region7 <- region_slice(
  time_bp = -7000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region6 <- region_slice(
  time_bp = -6000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region5 <- region_slice(
  time_bp = -5000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region4 <- region_slice(
  time_bp = -4000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region3 <- region_slice(
  time_bp = -3000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region2 <- region_slice(
  time_bp = -2000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")
climate_region1 <- region_slice(
  time_bp = -1000, 
  bio_variables = biovars,
  ext= terra::ext(60, 150, -20, 50),
  dataset = "Beyer2020")

mh_pred  <- list(climate_region8, climate_region7, climate_region6, climate_region5, climate_region4, climate_region3, climate_region2, climate_region1) %>%
  map(setNames, paste0('bio', 1:19)[-c(2:3)]) %>%
  map(~ predict(.x, simp_fit, type = 'prob', na.rm = TRUE) %>% st_as_stars() %>%
  slice('band', 1)) %>%
  do.call(c, .) %>%
  setNames(c('8ka', '7ka', '6ka', '5ka', '4ka', '3ka', '2ka', '1ka')) %>%
  merge() %>%
  setNames('niche_prob')

ggplot() +
  geom_stars(data = mh_pred) +
  scale_fill_viridis_c() +
  facet_wrap(~attributes)
ggplot() + geom_stars(data = slice(mh_pred, 'attributes', 1) - slice(mh_pred, 'attributes', 8)) + scale_fill_distiller(palette = 'RdBu', na.value = NA, limits = c(-.9, .9))


#climate_region[[1]][[1]]
#beyer_delta <- st_as_stars(climate_region[[1]] - climate_region[[1]][[8]])
#ggplot() + geom_stars(data = beyer_delta) + scale_fill_distiller(palette = 'RdBu', na.value = NA, limits = c(-4.2, 4.2)) + facet_wrap(~time)
```
