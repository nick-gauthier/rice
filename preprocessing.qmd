---
title: "Data Preprocessing and Computationally Intensive Analyses"
format: html
editor: visual
bibliography: references_methods.bib
---

```{r setup}
# analysis packages
library(stars) # spatio-temporal raster processing
library(sf)
library(tidyverse)
library(terra)
library(here) # cross-platform directory structures
library(readxl)
library(rcarbon)
library(rsample) # bootstraps
library(eks)
library(units)
library(rnaturalearth)
library(patchwork) # multi-panel plots
library(units)
library(glue)

#bbox <- terra::ext(60, 150, -20, 50)
bbox <- terra::ext(60, 150, -11, 54)
bbox_world <- terra::ext(-130, 155, -40, 60)  # global
#asia_bbox_sf <- st_bbox(c(xmin = 60, xmax = 150, ymin = -20, ymax = 50), crs = 4326)
asia_bbox_sf <- st_bbox(c(xmin = 60, xmax = 150, ymin = -11, ymax = 54), crs = 4326)
world_bbox_sf <- st_bbox(c(xmin = -130, xmax = 155, ymin = -40, ymax = 60), crs = 4326)

theme_set(theme_bw())

# get country boundaries shapefiles for plotting
# install rnaturalearth hires from github if not available
# remotes::install_github("ropensci/rnaturalearthhires")

sf_use_s2(FALSE)
countries <- ne_countries(scale = 'large') %>% 
  st_crop(asia_bbox_sf)
coasts <- ne_coastline() %>%
  st_crop(asia_bbox_sf)
coasts_world <- ne_coastline() %>% 
  st_crop(world_bbox_sf)
countries_world <- ne_countries(scale = 'large') %>% 
  st_crop(world_bbox_sf)
sf_use_s2(TRUE)

# parallel processing
available_cores <- parallel::detectCores(logical = TRUE)
```

# Methods

This is an extended version of the Materials and Methods section, interleaved with R code to reproduce the core data preprocessing workflow and computationally intensive analyses. The results of this notebook are archived separately to enable fast reproduction of the main and supplementary analyses presented in the manuscript.

## Climate Data

We used high-resolution gridded climate data from version 2.1 of the CHELSA product [@karger2017, @Karger2018, @brun2022, @brun]. CHELSA incorporates bias-corrected outputs from the ERA-5 reanalysis with high-resolution terrain data using mechanistic relationships between local climate and terrain. Compared to other global gridded climate products, CHELSA offers superior performance in mountainous regions, and its reliance on high-quality reanalysis data instead of raw weather station data ensures greater accuracy and internal consistency among climate variables.

### Contemporary Climate Data

For present-day observed climate, we used the CHELSA V2.1 product spanning the period 1981-2010 at a 1km resolution. We further aggregated the native 1km data to 5km and 10km grids to assess the sensitivity of our results to the scale of the analysis, given the variable spatial support of the contemporary rice extent data. In all cases we used standard temperature indicators used in ecological niche modeling studies [@brun], derived from monthly climatologies of minimum and maximum temperature, which collectively represent annual means, monthly extremes, and seasonality.

First we download the CHELSA data if they are not already present in the `data/` folder.

```{r download-chelsa}
# download contemporary CHELSA temperature rasters
url_base <- 'https://os.zhdk.cloud.switch.ch/envicloud/chelsav2/GLOBAL/climatologies/1981-2010/bio/'
filenames <- c('CHELSA_bio1_1981-2010_V.2.1.tif', 
               'CHELSA_bio5_1981-2010_V.2.1.tif', 
               'CHELSA_bio10_1981-2010_V.2.1.tif',
               'CHELSA_bio12_1981-2010_V.2.1.tif',
               'CHELSA_pet_penman_mean_1981-2010_V.2.1.tif') # PET used as land mask

walk(filenames, function(x) {
  target_file <- here('data/raw', x)
  if (!file.exists(target_file)) {
    download.file(paste0(url_base, x), target_file)
  }
})
```

Then read them in using `terra::rast()`.

```{r load-chelsa}
chelsa_1km <- here('data/raw', filenames[-5]) |>
  rast() |>
  setNames(c('bio1', 'bio5', 'bio10', 'bio12'))

# get the PET map to use as a land mask on the CHELSA grid
chelsa_mask <- here('data/raw', filenames[5]) |>
  rast() %>%
  crop(bbox_world)
```

Regrid to 5 and 10km resolution.

```{r regrid-chelsa}
chelsa_5km <- aggregate(chelsa_1km, fact = 5, cores = available_cores, na.rm = TRUE)
chelsa_10km <- aggregate(chelsa_1km, fact = 10, cores = available_cores, na.rm = TRUE)
```

Make additional copies cropped to Asia.

```{r}
chelsa_1km_asia <- crop(chelsa_1km, bbox)
chelsa_5km_asia <- crop(chelsa_5km, bbox)
chelsa_10km_asia <- crop(chelsa_10km, bbox)
```

Check the range of values at different resolutions and extents. The upper temperatures don't appear to be very sensitive to resolution, which is good.

```{r eval = FALSE}
list(chelsa_1km, 
     chelsa_5km, 
     chelsa_10km, 
     chelsa_1km_asia, 
     chelsa_5km_asia, 
     chelsa_10km_asia) %>%
  map(minmax, compute = TRUE)
```

### Paleoclimate reconstructions

Past climate data were derived from the CHELSA-TraCE21k product, a downscaled version of TraCE-21k simulation of the CCSM3 climate model spanning the last 21,000 years, at 100 year intervals [@karger2023, @He2011]. This product uses the older CHELSA V1.2 algorithm, along with a trend-preserving bias correction and topographic correction for shifting ice sheets across the deglacial period.

```{r}
trace_order <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01/',#here('data/raw/chelsa_trace/bio01'), 
                          full.names = FALSE) %>%
  str_sub(23, -10) %>% 
  as.numeric() %>% 
  sort()
  order()



trace_tmp <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01/',#here('data/raw/chelsa_trace/bio05'), 
                         full.names = TRUE)[trace_order] |>
  rast() |>
  crop(ext(asia_bbox_sf))

trace_tmax <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio05/',#here('data/raw/chelsa_trace/bio05'), 
                         full.names = TRUE)[trace_order] |>
  rast() |>
  crop(ext(asia_bbox_sf))


trace_twarm <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio10/',#here('data/raw/chelsa_trace/bio05'), 
                         full.names = TRUE)[trace_order] |>
  rast() |>
  crop(ext(asia_bbox_sf))


trace_times <- as.Date("1950-01-01") - years(seq(12000, 0, -100))

time(trace_tmax) <- trace_times
names(trace_tmax) <- sprintf("t%03d", seq_len(121))
time(trace_twarm) <- trace_times
names(trace_twarm) <- sprintf("t%03d", seq_len(121))
time(trace_tmp) <- trace_times
names(trace_tmp) <- sprintf("t%03d", seq_len(121))


chelsa_trace <- sds(trace_tmp, trace_tmax, trace_twarm) |>
    setNames(c('bio1', 'bio5', 'bio10'))
writeCDF(chelsa_trace, 'chelsa_trace.nc', compression = 6)
```

```{r}
-100 * ((-100:20) - 20) 
seq(12000, 0, -100)
trace_times <- as.Date("1950-01-01") - years(seq(12000, 0, -100))

chelsa_trace <- read_stars('chelsa_trace.nc') |>
  st_set_dimensions('time', values = trace_times, names = 'time') |>
  setNames(c('MAT', 'tmax', 'twarm')) |>
  st_set_crs(4326)

chelsa_trace <- read_mdim('chelsa_trace.nc', proxy = TRUE) |>
  setNames(c('MAT', 'tmax', 'twarm')) |>
    st_set_dimensions('time', values = trace_times, names = 'time')

plot(chelsa_trace[1,,,1])
#time(chelsa_trace) <- seq(-12, 0, 0.1) * 1000
```

```{r}
chelsa_trace_base <- "https://os.zhdk.cloud.switch.ch/chelsav1/chelsa_trace/bio"
chlesa_local_base <- '~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01/' # or bio05, etc
# Make full /vsicurl URLs for any CHELSA variable & index vector
trace_proxy <- function(var = c("bio01","bio05","bio10"), idx = -100:20) {
  var <- match.arg(var)
  
  urls <- glue("/vsicurl/{chelsa_trace_base}/CHELSA_TraCE21k_{var}_{idx}_V1.0.tif")
  
  times <- as.Date("1950-01-01") - years(-100 * ((idx) - 20)) 
  
  read_stars(urls, proxy = TRUE, along = 'time') |> 
    st_set_dimensions('time', values = times, names = 'time')
}

trace_tmp <- trace_proxy('bio01')
trace_tmax <- trace_proxy('bio05')
trace_twarm <- trace_proxy('bio10')

chelsa_trace <- c(trace_tmp, trace_tmax, trace_twarm) %>%
  setNames(c('MAT', 'tmax', 'twarm'))

# test it worked
plot(chelsa_trace[1,,,1], downsample = 200)
```

```{r chelsa-trace}
# this is not portable nor easily downloadable (the entire dataset is ~300gb). Instead, we save the data extracted at the archaeological site points later on and skip executing this chunk by default

trace_order <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01/',#here('data/raw/chelsa_trace/bio01'), 
                          full.names = FALSE) %>%
  str_sub(23, -10) %>% 
  as.numeric() %>% 
  order()

trace_tmp <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio01/',#here('data/raw/chelsa_trace/bio01'), 
                        full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time')

trace_tmax <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio05/',#here('data/raw/chelsa_trace/bio05'), 
                         full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time')

trace_twarm <- list.files('~/Dropbox (UFL)/Data/CHELSA/chelsa_trace/bio10/',#here('data/raw/chelsa_trace/bio10'), 
                         full.names = TRUE)[trace_order] %>%
  read_stars(along = 'time') 

cog_url <- "/vsicurl/https://os.zhdk.cloud.switch.ch/chelsav1/chelsa_trace/bio/CHELSA_TraCE21k_bio01_-100_V1.0.tif"
library(stars)

x <- read_stars("/vsis3/chelsav1/chelsa_trace/bio/CHELSA_TraCE21k_bio01_-100_V1.0.tif",
                proxy = TRUE)
plot(x[,,,1])  # or st_extract(...) for point sampling

# Set environment variables
Sys.setenv(AWS_NO_SIGN_REQUEST = "YES")
Sys.setenv(GDAL_DISABLE_READDIR_ON_OPEN = "EMPTY_DIR")

# proxy=TRUE ensures only metadata is read at this point
r <- read_stars(cog_url, proxy = TRUE)
plot(r, downsample = 200)


chelsa_trace <- c(trace_tmp, trace_tmax, trace_twarm) %>%
    st_set_dimensions('time', values = trace_times, names = 'time') |>
  #st_set_dimensions('time', values = seq(-12, 0, 0.1) * 1000, names = 'time') %>%
  setNames(c('MAT', 'tmax', 'twarm'))

# save the the area-averaged time series as well
sf_use_s2(FALSE)
trace_ts <- list('bio01', 'bio05', 'bio10') |>
  map(~ paste0(here('data/raw/chelsa_trace/'), .x) |>
        list.files(full.names = TRUE) %>%
        .[trace_order] |>
        read_stars(along = 'time') |>
          st_downsample(n = 50) |>
  st_crop(asia_bbox_sf)) %>%
  do.call('c', .) |>
  st_set_dimensions('time', values = seq(12, 0, -0.1), names = 'time') |>
  setNames(c('bio1', 'bio5', 'bio10')) |>
  st_apply(3, mean) |>
  as_tibble()
sf_use_s2(TRUE)

write_rds(trace_ts, here('data/derived/trace_ts.rds'))
https://os.zhdk.cloud.switch.ch/chelsav1/chelsa_trace/bio/CHELSA_TraCE21k_bio01_-100_V1.0.tif

# test of alternative method using vsicurl to stream data w/out download, too slow for most applications though!
test <- read_stars('/vsicurl/https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V1/chelsa_trace/bio/CHELSA_TraCE21k_bio01_-100_V1.0.tif', proxy = TRUE)
#plot(test)
```

Download, import, and process the LGMR and Erb et al. reconstructions. Save the results clipped to Asia for further analysis.

```{r}
erb_url <- 'https://zenodo.org/records/6426332/files/holocene_reconstruction.nc'
lgmr_url <- 'https://www.ncei.noaa.gov/pub/data/paleo/reconstructions/osman2021/LGMR_SAT_climo.nc'

erb_dest <- here('data/raw/holocene_reconstruction.nc')
lgmr_dest <- here('data/raw/LGMR_SAT_climo.nc')



options(timeout = max(1500, getOption("timeout")))
if (!file.exists(erb_dest)) download.file(erb_url, erb_dest)
if (!file.exists(lgmr_dest)) download.file(lgmr_url, lgmr_dest)
 
sf_use_s2(FALSE)
erb_rast <- read_ncdf(erb_dest, var = 'recon_tas_ens') |>
  st_set_crs(4326) |>
  st_crop(asia_bbox_sf) |>
  st_as_stars() |>
  st_apply(c(1,2,4), function(x) c(sat_mean = mean(x), sat_sd = sd(x))) |>
  split(1) |>
  mutate(sat_low = sat_mean - sat_sd,
         sat_high = sat_mean + sat_sd)

lgmr_rast <- read_ncdf(lgmr_dest, eps = .001, proxy = FALSE) |>
  st_crop(asia_bbox_sf) |>
  drop_units() |>
  st_set_dimensions(names = c('x', 'y', 'time')) |>
  filter(time <= 12000) 
sf_use_s2(TRUE)

write_rds(erb_rast, here('data/derived/erb_rast.rds'))
write_rds(lgmr_rast, here('data/derived/lgmr_rast.rds'))

plot(erb_rast[,,,1:10])
plot(lgmr_rast[,,,1:10])
```

### Future climate projections

Future climate model ensembles were derived from phase six of the Coupled Model Intercomparison Project (CMIP6) [@eyring2016], using the subset of bias-corrected models and scenarios used in phase 3b of the Inter-Sectoral Impact Model Intercomparison Project (ISIMIP) [@lange2019], bilinearly interpolated to the CHELSA V2.1 basemap using the delta change approach [@brun, @brun2022].

```{r}
model_names <- c('gfdl', 'ipsl', 'mpi', 'mri', 'ukesm')
ssp_names <- c('ssp126', 'ssp370', 'ssp585')

cmip6 <- model_names %>%
  map(paste,  ssp_names, sep = '/' ) %>%
  map_depth(1, ~here('data/raw/chelsa_cmip', .x, 'bio') %>% as.list()) %>% #'~/Dropbox (UFL)/Data/CHELSA/CMIP6/2071-2100/'
  map_depth(2, ~list.files(.x, full.names = TRUE, pattern = '*_bio1_|_bio5_|_bio10_*')) %>%
  map_depth(2, ~read_stars(.x) %>%
              setNames(c('bio1', 'bio10', 'bio5')) %>%
              st_redimension()) %>%
  map(~do.call('c', .x) %>% 
        setNames(c('SSP1-2.6', 'SSP3-7.0', 'SSP5-8.5')) %>% 
        st_redimension()) %>%
  do.call('c', .) %>%
  setNames(model_names) %>%
  st_redimension() %>%
  st_set_dimensions(names = c('x', 'y', 'variable', 'ssp', 'model')) %>%
  setNames('temperature') %>%
  .[countries] |>
  st_downsample(10) # downsample for plotting

saveRDS(cmip6, here('data/derived/cmip6_data.rds'))
```

This dataset can be downloaded from the CHELSA repository but is quite large. For reproducibility we save intermediate versions of this needed for analyses in the main text and supplement.

#### Country level summaries

Create country level summaries of projections. This process is convoluted to cut down on computational time.

```{r}
countries_sub <- countries %>% 
  filter(name %in% c('China', 'India', 'Indonesia', 'Bangladesh', 'Vietnam', 
                     'Thailand', 'Philippines', 'Myanmar', 'Pakistan', 'Japan', 
                     'South Korea', 'Cambodia', 'Laos', 'Nepal', 'Malaysia'))
         
countries_extract <- chelsa_obs %>%
  split('variable') %>%
  mutate(bio1 = bio1 > drop_units(bio1_limit),
         bio10 = bio10 > drop_units(bio10_limit),
         bio5 = bio5 > drop_units(bio5_limit)) %>%
  rename(`Mean annual temperature` = bio1,
         `Max temperature of warmest quarter` = bio10,
         `Max temperature of warmest month` = bio5) %>%
  merge(name = 'variable') %>%
  st_crop(st_bbox(countries_sub)) %>%
  st_downsample(5) %>%
  setNames('sum')

plot(countries_extract)

test <- cmip6 %>%
  split('variable') %>%
  mutate(bio1 = bio1 > drop_units(bio1_limit),
         bio10 = bio10 > drop_units(bio10_limit),
         bio5 = bio5 > drop_units(bio5_limit)) %>%
  rename(`Mean annual temperature` = bio1,
         `Max temperature of warmest quarter` = bio10,
         `Max temperature of warmest month` = bio5) %>%
  merge(name = 'variable')


plot(countries['name'] )

test1 <- st_crop(test, st_bbox(countries_sub)) %>%
  st_downsample(5) %>%
  setNames('sum')

areas <- st_area(test1) %>% drop_units()
plot(areas)
plot(obs_test)

test2 <- test1 * areas
plot(test2)

obs_weight <- countries_extract * areas
plot(obs_weight, downsample = 0)

test3 <- aggregate(test2, by = st_geometry(countries_sub), FUN = sum, na.rm = TRUE) %>%
  as_tibble() %>%
  select(-geometry) %>%
  mutate(name = rep(countries_sub$name, length.out = n()))


test4 <- aggregate(areas, by = st_geometry(countries_sub), FUN = sum, na.rm = TRUE) %>%
  as_tibble() %>%
  select(-geometry) %>%
  mutate(name = countries_sub$name)

obs_ext <- aggregate(obs_weight, by = st_geometry(countries_sub), FUN = sum, na.rm = TRUE) %>%
  as_tibble() %>%
  select(-geometry) %>%
  mutate(name = rep(countries_sub$name, length.out = n())) %>%
  left_join(test4) %>%
   mutate(percent = round(sum / area * 100),
          ssp = 'present')

df <- left_join(test3, test4) %>%
  mutate(percent = round(sum / area * 100)) %>%
  #select(-sum, -area) %>%
  group_by(name, variable, ssp) %>%
  summarise(percent = mean(percent, na.rm = TRUE),
            sum = mean(sum, na.rm = TRUE),
            area = mean(area, na.rm = TRUE)) %>%
  ungroup() %>%
  bind_rows(obs_ext)

saveRDS(df, 'data/derived/country_stats.rds')
```

### 

## Contemporary Rice Distribution Data

We collected rice occurrence data from a variety of sources combining information from satellites, administrative statistics, and herbarium collections. Our goal was to assess the sensitivity of our results to various modes of data collection, sampling, spatiotemporal scale, and other potential sources of bias.

### Point Occurrences

Geolocated, point-based occurrence records for rice and its wild progenitor synthesized from previous studies [@civán2018; @yang2022; @ramirez-villegas2022], originally sourced from GBIF, the Rice Haplotype Map project, and other datasets based on herbarium specimens or germplasm samples from international genebank databases. Given their direct identification, these occurrence records generally offer greater reliability than area-averaged crop occurrences derived from satellites and sub-national statistics. Nonetheless, they are susceptible to spatial sampling bias. For instance, regions like China are underrepresented in GBIF in terms of sampling effort compared to neighboring countries with similar geographical extent, and herbarium collections may more accurately sample upland rice varieties at the expense of larger paddy fields. After creating the full combined datasets, geolocations were checked for anomalous entries then thinned to a uniform grid to minimize irregular spatial sampling.

We extracted the contemporary CHELSA climate data at each set of occurrence points for each data type to calculate temperature distributions and quantiles. We explored various combinations of grid/point resolution for the climate and occurrence datasets from 1-10km, but found this did not impact the upper temperature threshold estimates.

#### GBIF/Herbaria Records

```{r gbif}
occ <- here('data/raw/Datasets of occurrence records of rice and its wild progenitor.xlsx')
 
if (!file.exists(occ)) download.file('https://figshare.com/ndownloader/files/33903758', occ)

rufipogon <- read_excel(occ, skip = 6715) %>%
  select(-x, -`the wild progenitor`) %>%
  st_as_sf(coords = 2:1, crs = 4326) %>%
  st_crop(asia_bbox_sf) %>% # remove south american obs, likely different species
  mutate(rice = 'present')

sativa <- read_excel(occ, n_max = 6714) %>%
  remove_missing() %>%
  select(-x, -Rice) %>%
  st_as_sf(coords = 2:1, crs = 4326) %>%
  mutate(rice = 'present') %>%
  select(-continent)

ggplot() +
  geom_sf(data = countries_world, color = 'white') +
  geom_sf(data = sativa, size = 0.1, color = 'black') +
  geom_sf(data = rufipogon, color = 'green', size = 0.1) +
  labs(title = "Rice occurence data", 
       subtitle = "O. sativa (black), O. rufipogon (green)", 
       caption = 'source: Yang et al. 2022, via GBIF, CHV') 
```

#### Genbank accessions

```{r}
gen_occs_data <- here('data/raw/12862_2018_1180_MOESM1_ESM.xls')
if (!file.exists(gen_occs_data)) download.file('https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5913815/bin/12862_2018_1180_MOESM1_ESM.xls', gen_occs_data)

gen_occs <- gen_occs_data %>%
  read_excel(skip = 2) %>%
  mutate(lat = parse_double(`Latitude*†`),
         lon = parse_double(`Longitude*†`),
         type = `Species/ecotype*`) %>%
  filter(!(is.na(lon) | is.na(lat))) %>%
  st_as_sf(coords = c('lon', 'lat'), crs = 4326) %>%
  select(type) %>%
  filter(type %in% c('indica', 'O. rufipogon', 'temperate japonica'))

ggplot() +
  geom_sf(data = countries, color = 'white') +
  geom_sf(data = gen_occs, aes(color = type),
          size = 1) +
  labs(title = "Rice occurence data", 
       subtitle = "From genetic assessions", 
       caption = 'source: Civáň and Brown 2018')
```

#### Combined

Thin the two sets of occurrence records to a 1km grid and combine. So let's combine this with the GBIF occurrence above. It definitely helps us sample the temperate varieties better, but its still a minor influence relative to the numbers of gbif points. These are predictions from a classifier that use climate data, so not exactly useful here but interesting to see.

```{r}
rufip_thin <- dismo::gridSample(
  st_coordinates(rufipogon), 
  r = chelsa_mask) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1,
         type = 'rufipogon')

sativa_thin <- dismo::gridSample(
  st_coordinates(sativa), 
  r = chelsa_mask) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1,
         type = 'sativa')

gbif_thin <- bind_rows(sativa_thin, rufip_thin)

gen_thinned <- gen_occs %>%
  group_nest(type) %>%
  mutate(data = map(data, 
                    ~dismo::gridSample(st_coordinates(.x), 
                                       r = chelsa_mask) %>%
                      as_tibble())
  ) %>%
  unnest(data) %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326) %>%
  mutate(presence = 1)

comb <- bind_rows(gen_thinned, gbif_thin)

ggplot() +
  geom_sf(data = countries, color = 'white') +
  geom_sf(data = st_crop(comb, asia_bbox_sf), 
          aes(color = type),
          size = .5) +
  geom_sf(data = coasts)
```

```{r}
pred_var <- 'data/raw/Ramirez-Villegas/Sup_table_3_per_crop/rice (asia).csv' %>%
  read_csv() %>%
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  select(ensemble)

ggplot(pred_var, aes(color = ensemble)) +
  geom_sf(size = 1, alpha = 0.5) +
  scale_color_brewer(palette = 'Spectral') +
  geom_sf(data = coasts, color = 'black')

#gutaker et al accessions (used for genetic analysis later)
rice_accessions <- list(indica = 'data/raw/indica_accessions.csv',
                        japonica = 'data/raw/japonica_accessions.csv') %>%
  map(read_csv) %>%
  map(remove_missing) %>% # missing points data in Taiwan
  map_dfr(st_as_sf, coords = c('LON', 'LAT'), crs = 4326, .id = 'type')

comb_final <- comb %>%
  filter(!(type %in% c('O. rufipogon', 'rufipogon'))) %>%
  bind_rows(pred_var) %>%
  bind_rows(rice_accessions) %>%
  st_coordinates() %>%
  dismo::gridSample(r = chelsa_mask) %>% 
  as_tibble() %>%
  st_as_sf(coords = c('X', 'Y'), crs = 4326)

ggplot() +
  geom_sf(data = comb_final, size = .5) +
  geom_sf(data = coasts)

ggplot() +
  geom_sf(data = comb_final %>% st_crop(asia_bbox_sf), size = .5) +
  geom_sf(data = coasts)
```

```{r}
occ_dat <- terra::extract(chelsa_1km, comb_final, ID = FALSE) %>%
  bind_cols(comb_final, .)

ggplot(occ_dat) +
  geom_sf(data = countries_world, color = NA) +
  geom_sf(size = 0.1) +
  theme_minimal()
```

### Satellite-derived occurrences

#### International Rice Research Institute

Satellite-based estimates of lowland rice extent in Asia from the International Rice Research Institute [@nelson2015]. This dataset employs high-resolution (500m) presence-absence markers from MODIS observations and offers relatively uniform sampling across both temperate and tropical regions. It provides a more objective approach than spatially biased occurrence records. However, its coverage is limited to East and Southeast Asia and it may poorly distinguish intercropped wheat and rice in Northeast China and natural wetlands and paddy rice cultivation in Indonesia. To minimize such sampling issues, we aggregated the 500m data into 5km grid cells, dropping occurrences with less than 20% coverage to minimize false positives from low-pixel observations. Subsequent analyses of these data proved robust to the exact resolution and coverage threshold used.

```{r fig.width=6, fig.height=5}
irri <- rast(here('data/raw/IRRI Asia Rice Extent Map/asia-rice-extent.tif')) %>%
  aggregate(fact = 10) %>% # from 500m to 5km
  mask(., resample(chelsa_mask, .)) %>%
  setNames('extent')

ggplot() +
  geom_stars(data = st_as_stars(irri)) +
  scale_fill_viridis_c(na.value = 'NA') +
  coord_quickmap()

ggplot() +
  geom_stars(data = st_as_stars(irri) > 0.20) +
  scale_fill_manual(values = c('grey', 'red'), na.value = NA, guide = FALSE) +
  labs(title = 'Satellite-based lowland rice extent', 
       caption = 'Nelson and Gumma (2015) "A map of lowland rice extent in the major rice growing countries of Asia"', x = '', y = '')
```

```{r}
irri_occ <- irri %>%
  as.data.frame(xy = TRUE) %>%
  st_as_sf(coords = c('x', 'y'), crs = 4326) %>%
  filter(extent > 0.20) %>%
  bind_cols(., terra::extract(chelsa_5km, ., ID = FALSE))

ggplot(irri_occ) +
  geom_sf(data = countries, color = NA) +
  geom_sf(size = 0.1, alpha = 0.1) +
  scale_color_manual() + 
  theme_minimal() 
```

We also extract CMIP6 future projections at IRRI occurrence points and save the results for Figure 4, to avoid having to include the full 100gb CMIP data in the main analysis.

```{r}
fig_4_data <- irri_occ %>%
  st_extract(cmip6, .) %>%
  as_tibble() %>%
  st_drop_geometry() %>%
  group_by(geometry, variable, ssp) %>%
  summarize(temperature = mean(temperature)) %>%
  ungroup() %>%
  mutate(temperature = set_units(temperature, degree_c))

saveRDS(fig_4_data, here('data/derived/fig_4_data.rds'))
```

#### Monfreda and Ramankutty

Estimates of paddy rice harvested areas around the year 2000 [@monfreda2008]. This dataset, integrates satellite-based estimates of cropland with sub-national statistics for rice harvested areas. It utilizes geospatial cropland maps to downscale harvest area and yield census data and offers global coverage at approximately 10km resolution. Countries that lack detailed administrative data at the subnational level, such as Laos and Kazakhstan, can exhibit overly smoothed areas. The use of harvested area as a metric can be misleading in regions with multiple annual harvests, leading to double or triple counting.

```{r}
# this is just "paddy rice" according to documentation
monfreda_fraction <- geodata::crop_monfreda('rice', 
                                            var = 'area_f', 
                                            here('data/raw')) %>%
  crop(., resample(chelsa_mask, .), mask = TRUE) %>%
  clamp(upper = 1, values = TRUE) %>% # fraction can be greater than 1 because of multi cropping
  st_as_stars() %>%
  st_crop(world_bbox_sf) %>%
  setNames('area_f')

ggplot() +
  geom_stars(data = monfreda_fraction) +
  scale_fill_viridis_c(na.value = NA, trans = 'log') +
  geom_sf(data = coasts_world, color = 'black') 

ggplot() +
  geom_stars(data = monfreda_fraction > 0.05) +
  scale_fill_manual(values = c('grey', 'red'), na.value = NA, guide = FALSE) +
  geom_sf(data = coasts_world, color = 'black') 
```

```{r}
monfreda_occ <- monfreda_fraction %>%
  rast() %>%
  clamp(lower = 0.05, values = FALSE) %>% # minimum 5% coverage fraction, equivalent to irri given resolution differences
  as.data.frame(xy = TRUE) %>%
  st_as_sf(coords = c('x', 'y'), crs = 4326) %>%
  dplyr::select(extent = area_f) %>%
  bind_cols(., terra::extract(chelsa_10km, ., ID = FALSE))

ggplot(monfreda_occ) +
  geom_sf(data = countries_world, color = NA) +
  geom_sf(size = 0.1) +
  theme_minimal() 
```

```{r fig.asp=0.4, fig.width = 10}
a <- ggplot(occ_dat) +
  geom_sf(data = countries_world, color = NA) +
  geom_sf(size = 0.1) +
  theme_minimal()

b <- ggplot(irri_occ) +
  geom_sf(data = countries, color = NA) +
  geom_sf(size = 0.1) +
  theme_minimal() 

c <- ggplot(monfreda_occ) +
  geom_sf(data = countries_world, color = NA) +
  geom_sf(size = 0.1) +
  theme_minimal() 

b + (a / c) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'A', tag_suffix = ')')
```

```{r}
save(irri_occ, monfreda_occ, occ_dat,
     file = here('data/derived/occurrence_data.RData'))
```

## Archaeological Data

We used past rice occurrence data sourced from archaeological sites, as synthesized in @Guedes2018 and @long2022 and primarily derived from version 2 of the Rice Archaeological Database [@silva2015]. We also included observations from @crema2022 to increase data coverage in Japan. These records are typically of botanical remains, believed to represent O. sativa japonica from these archaeological sites, with less intensive sampling of indica varieties from northern India. However, based on their chronology, some occurrences might pertain to the wild-type O. rufipogon or O. nivara.

```{r}
gb2018 <- here('data/raw/guedesbocinsky2018_crops_across_eurasia.xlsx') %>%
  read_excel() %>%
  filter(is.na(`Exclude?`) & (!is.na(Rice) | !is.na(`Rice (wild)`))) %>% # just rice
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  select(labcode = `Lab sample identifier`, 
         site = Site, 
         Period, 
         Notes, 
         Material, `14C date on cereal?`, 
         age_lower = `Age range lower (BP)`, 
         age_upper = `Age range upper (BP)`, 
         C14Age = `14C age BP`, 
         C14AgeError = `1-sigma uncertainty`, 
         Reference, 
         `Rice (wild)`) %>%
  filter(site != 'Huizui East', # duplicated with diff name in long
        is.na(labcode) | labcode != 'Beta- 378858') %>% # incorrect date per original source and long
  mutate(source = 'gb')

long <- here('data/raw/ScienceDirect_files_13Feb2023_15-12-15/1-s2.0-S1040618221005577-mmc2.xlsx') %>%
  read_excel(skip = 11, n_max = 260) %>%
  rename(lon = `Longitude (°E)`,
         lat = `Latitude (°N)`) %>%
  st_as_sf(coords = c('lon', 'lat'), crs = 4326) %>%
  st_crop(asia_bbox_sf) %>% # only sites in Asia
  rename(site = `Archaeological site`,  
         C14Age = `Uncalibrated radiocarbon age (14C BP)`, 
         cal_age = `Calibrated median (BCE/CE)`, 
         labcode = `Lab ID`,
         C14AgeError = `Radiocarbon dating uncertainty (yr)`) %>%
  mutate(site = if_else(site == 'Khao Sam Kaeo', 'Khao Sam Kheo', site),
         site = if_else(site == 'Ter', 'Ter (Thair)', site)) %>%
  filter(!(labcode %in% gb2018$labcode)) |>
  mutate(source = 'long')

long_filter <- long %>%
  bind_rows(gb2018) %>%
  select(site, C14Age) %>%
  st_drop_geometry() %>%
  remove_missing() %>%
  filter(duplicated(.))

japan_arch <- read_csv('data/raw/sciadv.adc9171_data_s1.csv') %>% # two rows ohave commas, not important
  filter(USED == 'TRUE') %>% 
  st_as_sf(coords = c('Longitude', 'Laitude'), crs = 4326) %>% # "Laitude"
  rename(site = SiteName_en, labcode = LabCode) |>
  mutate(source = 'japan')

not_near <- function(x, y, dist) !st_is_within_distance(x, y, dist)

rad <- read_excel('data/raw/Rice_RAD3_OWCAD v0_9977.xlsx') %>%
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = 4326) %>%
  filter(Oryza != 'Org') |>
  mutate(age_upper = -1 * (as.numeric(`Finish Date BC/AD`) - 1950), # introduces NA's to some rows without upper/lower dates (which is OK)
         age_lower = -1 * (as.numeric(`Start Date BC/AD`) - 1950)) |>
  filter(`GeoRef Quality` > 1) |> # only sites with < 10-20km location accuracy
  select(site = Site, age_lower, age_upper) %>%
  st_filter(st_union(gb2018), .predicate = not_near, dist = 1000) |>
  st_filter(st_union(japan_arch), .predicate = not_near, dist = 1000) |>
  st_filter(st_union(long), .predicate = not_near, dist = 1000) |>
  st_crop(asia_bbox_sf) %>% # only sites in Asia
  filter(!((site %in% gb2018$site) | (site %in% long$site) | (site %in% japan_arch$site))) %>%
  filter(!is.na(age_lower)) |>
  mutate(source = 'rad')

c14_cleaned <- bind_rows(
  anti_join(long, long_filter),
  filter(gb2018, !is.na(C14Age)), 
  japan_arch) %>%
   mutate(calib = ifelse(st_coordinates(geometry)[,2] > 0,
                         "intcal20",
                         "shcal20")) %>%
  select(site, C14Age, C14AgeError, calib, source) %>%
  arrange(site, C14Age)

cal <- calibrate(c14_cleaned$C14Age, 
                 c14_cleaned$C14AgeError, 
                 calCurves = c14_cleaned$calib,
                verbose = FALSE) 

c14_cleaned <- c14_cleaned %>%
  mutate(med_age = medCal(cal),
         id = 1:n()) %>%
  select(site, id, med_age, source)

phases_cleaned <- gb2018 %>% 
  filter(is.na(C14Age), !is.na(age_lower)) %>%
  select(site, age_lower, age_upper, source) %>%
  bind_rows(rad) %>%
  # ~6 sites have switched upper and lower ages
  mutate(temp_lower = pmax(age_lower, age_upper),
         age_upper = pmin(age_lower, age_upper),
         age_lower = temp_lower) %>%
  rowwise() %>%
  mutate(med_age = median(c(age_lower, age_upper)), .before = age_lower) %>%
  ungroup() %>%
  select(-temp_lower) |>
  filter(med_age <= 12000) |> # removes dates older than 12ka, 2x from Diaotonghuan cave and 1 each from Xianrendong, Yuchanyan, Sorori, and DG9605 core
  mutate(id = 1:n(),
         id = id + nrow(c14_cleaned)) 

arch_dat <- bind_rows(c14 = c14_cleaned,
                      period = phases_cleaned,
                      .id = 'type') %>%
  mutate(across(contains('age'), ~. * -1))

rm(long_filter, japan_arch, long, gb2018, rad)
```

After data harmonization---which involved eliminating potential outliers, rectifying misclassifications, and removing duplicated site data---we were left with a comprehensive dataset of `r nrow(arch_dat)` dates from `r length(unique(arch_dat$site))` archaeological sites. These datasets comprise a mixture of direct radiocarbon dates on rice remains, alongside median dates from associated contextual materials and ranges anchored in prevailing archaeological eras. We employed the Intcal20 calibration curve for recalibrating all radiocarbon dates, barring a single site in the southern hemisphere where we utilized SHcal20.

### Bootstrapping Archaeological Dates

To account for chronological uncertainty, we generated 5,000 bootstrap replicates, sampling from the radiocarbon dates' posterior density distribution and a uniform density for the archaeological phase dates.

```{r}
sampler_c14 <- function(splits) {
  analysis(splits) %>%
    mutate(time = -1 * map_dbl(cal_grid, ~sample(.x$calBP, size = 1, prob = .x$PrDens))) %>%
    select(id, time)
}

sampler_phase <- function(splits) {
   analysis(splits) %>%
    mutate(time = -1 * map2_dbl(age_lower, age_upper, # upper needs to be min not max
                               ~round(runif(1, min = .y, max = .x)))) %>%
    select(id, time)
}

nsim <- 5000
set.seed(5678)

c14_splits <- c14_cleaned %>%
  select(site, id, med_age) %>%
  mutate(cal_grid = cal$grids, .before = geometry) %>%
  group_bootstraps(group = site, times = nsim)

phase_splits <- phases_cleaned %>%
  select(site, id, age_lower, age_upper) %>%
  group_bootstraps(group = site, times = nsim)

boot_joined <- list(c14 = map_dfr(c14_splits$splits, sampler_c14, .id = 'rep'),
                    phase = map_dfr(phase_splits$splits, sampler_phase, .id = 'rep')) %>%
  bind_rows(.id = 'type') %>%
  mutate(time = time)
```

### Extracting paleoclimate data

We then extracted temperature variables from the CHELSA-TraCE21k v1.0 dataset at each sampled location in time and space. Finally, we constructed unique kernel density estimates of the temperature distributions at each rice occurrence point for every bootstrap replicate and temperature variable.

```{r}
plot(chelsa_trace[1,,,1])
arch_trace <- arch_dat %>%
  mutate(med_age = years(as.integer(med_age)) + as.Date("1950-01-01")) %>%
  st_extract(chelsa_trace, ., time_column = 'med_age', interpolate_time = FALSE) %>%
  st_drop_geometry() %>%
  bind_cols(select(arch_dat, -c(med_age, age_lower, age_upper)), .) %>%
  remove_missing() # this shouldn't remove anything

arch_trace2 <- arch_trace
arch_trace <- readRDS(here('data/derived/arch_trace.rds'))


arch_trace;arch_trace2
```

```{r}
saveRDS(arch_trace, here('data/derived/arch_trace.rds'))
```

Sample CHELSA at bootstrapped points in space-time.

```{r}
trace_boot <- boot_joined %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE) %>%
  st_drop_geometry() %>%
  bind_cols(st_drop_geometry(boot_joined) %>% select(-time), .) %>%
  remove_missing() # this shouldn't remove anything
```

```{r}
saveRDS(trace_boot, 'data/derived/trace_boot.rds')
```

### Visualizing Archaeological Bootstraps

```{r}
trace_boot %>%
  filter(time <= -2000) %>%
  select(rep, MAT:twarm) %>%
  pivot_longer(MAT:twarm) %>%
  group_by(rep, name) %>%
  tidy_kde() %>%
ggplot(aes(value, estimate)) +
  geom_line(alpha = 0.01, aes(group = rep)) +
  facet_wrap(~name, scales = 'free_y', nrow = 3)

trace_boot %>%
  filter(time <= -2000) %>%
  select(rep, type, MAT:twarm) %>%
  pivot_longer(MAT:twarm) %>%
  group_by(rep, name, type) %>%
  tidy_kde() %>%
ggplot(aes(value, estimate)) +
  geom_line(alpha = 0.01, aes(group = interaction(rep, type), color = type)) +
  facet_wrap(~name, scales = 'free_y', nrow = 3)
```

Looking at bootstrapped quantiles (there's a differences between dates and phases, likely because C14 dating is less common in India).

```{r}
trace_boot %>%
  filter(time < -2000) |> 
  pivot_longer(MAT:twarm, values_to = 'temperature') %>%
  mutate(temperature = set_units(temperature, 'degree_c')) %>%
  group_by(rep, name) %>%
  reframe(quant = quantile(temperature, 0.975, type = 8)) %>%
  ggplot(aes(quant)) +
  geom_histogram() +
  facet_wrap(~name, scales = 'free_x')

trace_boot %>%
  filter(time < -2000) |> 
  pivot_longer(MAT:twarm, values_to = 'temperature') %>%
  mutate(temperature = set_units(temperature, 'degree_c')) %>%
  group_by(type, rep, name) %>%
  reframe(quant = quantile(temperature, 0.975, type = 8)) %>%
  ggplot(aes(quant)) +
  geom_histogram() +
  facet_grid(type~name, scales = 'free') +
  theme_bw()
```

```{r}
 trace_boot %>%
  filter(time <= -2000) %>%
  select(rep, MAT:twarm) %>%
  pivot_longer(MAT:twarm) %>%
  group_by(rep, name) %>%
  tidy_kde() %>%
  saveRDS(here('data/derived/arch_boot_kde.rds'))

trace_boot %>%
  filter(time <= -2000) %>%
  pivot_longer(MAT:twarm, values_to = 'temperature') %>%
  mutate(temperature = set_units(temperature, 'degree_c')) %>%
  group_by(rep, name) %>%
  reframe(value = quantile(temperature, 0.975, type = 8)) %>%
  saveRDS(here('data/derived/arch_boot_quant.rds'))
```

Grouped by bin.

```{r}
nsim = 1000
c14_splits_dates <- c14_cleaned %>%
  select(site, C14Age) %>%
  mutate(id = 1:n(),
         cal_grid = cal$grids, .before = geometry) %>%
  slice(which.CalDates(cal, BP > 2000, p = 0.8)) %>% # focus on earlier sites
  bootstraps(times = nsim)

phase_splits_dates <- period_sites %>%
  mutate(id = (1:n()) + nrow(c14_cleaned)) %>%
  filter(age_lower > 2000) %>% # focus on earlier sites
  filter(age_upper < age_lower) %>% # one site has wrong dates?
  select(site, id, age_lower, age_upper) %>%
  bootstraps(times = nsim)

boot_joined_date <- list(c14 = map_dfr(c14_splits_dates$splits, sampler_c14, .id = 'rep'),
                    phase = map_dfr(phase_splits_dates$splits, sampler_phase, .id = 'rep')) %>%
  bind_rows(.id = 'type') %>%
  mutate(time = time * -1)

trace_boot_date <- boot_joined_date %>%
  st_extract(chelsa_trace, ., time_column = 'time', interpolate_time = TRUE) %>%
  st_drop_geometry() %>%
  bind_cols(st_drop_geometry(boot_joined_date) %>% select(-time), .) %>%
  remove_missing() # some dates are earlier than trace

trace_boot_date %>%
  filter(time < -2000)
arch_kde <- trace_boot_date %>%
  filter(time <= -2000) %>%
  select(rep, type, MAT:twarm) %>%
  pivot_longer(MAT:twarm) %>%
  group_by(rep, name, type) %>%
  tidy_kde()

ggplot(test_eks, aes(MAT, estimate)) +
     geom_line(alpha = 0.01, aes(group = rep)) +
  geom_line(data = test_eks2, alpha = 0.01, aes(group = rep), color = 'red')
            
          
ggplot(arch_kde, aes(value, estimate)) +
     geom_line(alpha = 0.01, aes(group = interaction(rep, type), color = type)) +
  facet_wrap(~name, scales = 'free_y', nrow = 3)
```

## Genetic Data

We performed a genetic offset analysis to evaluate the potential maladaptation of Oryza sativa subspecies indica and japonica under projected climate change scenarios. The workflow entailed a gene-environment association analysis focusing on the first principal component of the three temperature variables (MAT, TWARM, TMAX), which explained over 81% of the environmental variance across the locations of both rice subspecies. This analysis corrected for population structure and identified outlier single nucleotide polymorphisms (SNPs) as candidate loci from each linkage group. We leveraged a large dataset of geotagged japonica and indica accessions and biallelic SNPs filtered for quality and imputed for missing genotypes. The genetic offset, indicative of maladaptation to predicted climates, was calculated using these loci. We averaged model predictions across each climate models (UKESM, MRI, IPSL, etc.) in the ensemble for each Shared Socioeconomic Pathway (SSP).

Landraces are representative of the extant genetic diversity of crop species, and frequently exhibit local adaptations from sustained cultivation in specific geographic localities. Sampling landraces of a crop over a wide geographical area and sequencing their genomes can help identify putative adaptive variants associated with different environments. Genetic offset statistics provide measures of maladaptation under different or projected climate scenarios, based on association of genotypes with environmental variation [@gain2023].

Using previously published datasets of geotagged rice landraces belonging to the subspecies O. sativa ssp. Indica [@gutaker2020] and O. sativa ssp. Japonica [@alam2021], we performed gene-environment association (GEA) analyses with lfmm2 function from the R package LEA (v3.12.2)---on the two subspecies separately---to identify variants associated with variation in temperature [@gain2021]. Temperature was represented by the first principal component of mean annual temperature, mean maximum daily temperature of the warmest month, and mean daily temperature of the warmest quarter from CHELSA V2 averages for the period 1981-2010. The first principal component represented 84.6% and 86.12% of the variation in the environmental data for the indica and japonica datasets, respectively. To correct for population structure in the GEA, we provided the number of ancestral populations, K, as the number of latent factors in our latent factor mixed models [@gain2021]. We selected the number of ancestral populations based on the number of principal components of the genotype matrix that explain a large proportion of the variance, the cross-entropy---a measure of model fit---of different values of K, and information from prior studies [@gutaker2020; @alam2021]. Variants identified in the GEA were clumped within 100 kb of each other, selecting the variant with the lowest p-value as the focal SNP.

We used the genetic.offset function of the R package LEA [@gain2021] to calculate genomic offset statistics for rice landraces of O. sativa ssp. Indica and O. sativa ssp. Japonica while considering the temperature-associated variants as putative adaptive variants under the SSP1, SSP3, and SSP5 projected pathways that are used to derive greenhouse gas emission scenarios. We also calculated genomic offset statistics under the maximum estimated temperature at each location in the past 12,000 years. For both japonica and indica, the degree of maladaptation increases from SSP1, which is a best-case scenario with decreasing greenhouse gas emissions, to SSP3 to SSP5, which represents a worse-case scenario. Rice landraces appear relatively well-adapted under the past maximum temperature scenario, except for some varieties in the northern range of rice cultivation which is consistent with past findings that temperate-adapted northern varieties possibly started growing in these regions after a global temperature decline 4,200 years ago [@gutaker2020].

To make predictions about where the climate is likely to be optimal for rice-growing in the future, we sampled 10,000 grids from across Asia and calculated genomic offset scores for each individual in the environment of each grid, for the three SSP scenarios. We interpret the grid with the lowest offset score as a possible future optimal location for each rice individual. As a measure of the extent of movement that would be required for adaptation, we subtract the absolute value of the current latitude of each rice individual from the absolute value of the centroid latitude of the optimal grid; positive values of this absolute latitudinal distance indicate movement away from the equator.

```{r}
rice_accessions <- list(indica = 'data/raw/indica_accessions.csv',
                        japonica = 'data/raw/japonica_accessions.csv') %>%
  map(read_csv) %>%
  map(remove_missing) %>% # missing points data in Taiwan
  map_dfr(st_as_sf, coords = c('LON', 'LAT'), crs = 4326, .id = 'type')


ggplot() +
  geom_sf(data = countries_small) +
  geom_sf(data = rice_accessions, aes(color = type))
```

```{r}
# this extracts the chelsa climate layers at the point locations of the rice accessions
# the files are saved for processing in the separate genetic analysis notebook.
gen_mod <- extract(chelsa_1km, rice_accessions, ID = FALSE) %>%
  bind_cols(rice_accessions) %>%
  select(ID, type, bio1:bio10) %>%
  write_csv(here('data/derived/rice_temperatures_present.csv'))

gen_future <- cmip6 %>%
   st_extract(rice_accessions) %>%
   as_tibble() %>%
   bind_cols(map_dfr(1:45, ~rice_accessions)) %>%
   select(ID, type, ssp, model, variable, temperature) %>%
   pivot_wider(names_from = variable, values_from = temperature) %>%
     write_csv(here('data/derived/rice_temperatures_future.csv'))

gen_past <- chelsa_trace %>%
  st_extract(rice_accessions) %>%
  st_apply(1, max) %>%
  as_tibble() %>%
  bind_cols(rice_accessions) %>%
  select(ID, type, bio1 = MAT, bio5 = tmax, bio10 = twarm) %>%
  write_csv(here('data/derived/rice_temperatures_past.csv'))

bind_rows(gen_past, gen_mod, gen_future, .id = 'time') %>%
  pivot_longer(bio1:bio10) %>%
  ggplot(aes(value, color = time)) +
  facet_wrap(~name, nrow = 3) +
  geom_density()
```

## Computational Reproducibility

All analyses carried out in \`R\` \[\@base\]. The entire analysis is run in a reproducible \\\`.qmd\\\` notebook.
